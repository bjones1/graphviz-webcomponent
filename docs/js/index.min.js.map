{"version":3,"file":"index.min.js","sources":["index.js"],"sourcesContent":["const source = document.getElementById('source')\nconst graph = document.getElementById('graph')\nconst saveSVG = document.getElementById('save-svg')\nconst savePNG = document.getElementById('save-png')\nconst saveScript = document.getElementById('save-script')\nconst svgSizeRegExp = /<svg width=\"(\\d+)pt\" height=\"(\\d+)pt\"/\nlet svg, png, lastError, pendingUpdate, runningUpdate, remainingError\n\ngraph.setAttribute('graph', source.getAttribute('value'))\n\nfunction convertSVGToPNG () {\n  return new Promise((resolve, reject) => {\n    const size = svgSizeRegExp.exec(svg)\n    if (!size) throw new Error('Unknown SVG size.')\n    const canvas = document.createElement('canvas')\n    canvas.width = size[1] / 0.75\n    canvas.height = size[2] / 0.75\n    const context = canvas.getContext('2d')\n    const image = document.createElement('img')\n    image.onload = () => {\n      try {\n        context.drawImage(image, 0, 0)\n        canvas.toBlob(resolve)\n      } catch (error) {\n        reject(error)\n      }\n    }\n    image.onerror = () => reject(new Error('PNG conversion failed.'))\n    image.src = `data:image/svg+xml;base64,${btoa(svg)}`\n  })\n}\n\nasync function rememberImage ({ detail }) {\n  runningUpdate = false\n  lastError = undefined\n  svg = detail\n  saveSVG.disabled = false\n  try {\n    png = await convertSVGToPNG()\n    savePNG.disabled = false\n  } catch ({ message }) {\n    alert(message)\n  }\n}\n\nfunction forgetImage () {\n  svg = png = runningUpdate = lastError = undefined\n  saveSVG.disabled = savePNG.disabled = true\n}\n\nfunction downloadFile (blob) {\n  const link = document.createElement('a')\n  const type = blob.type\n  link.download = type === 'image/png' ? 'graph.png'\n    : type === 'image/svg+xml' ? 'graph.svg' : 'graph.dot'\n  document.body.appendChild(link)\n  const url = URL.createObjectURL(blob)\n  link.href = url\n  link.click()\n  document.body.removeChild(link)\n  URL.revokeObjectURL(url)\n}\n\nfunction displayError () {\n  clearTimeout(remainingError)\n  remainingError = undefined\n  if (pendingUpdate || runningUpdate || !lastError) return\n  graph.graph = source.value\n}\n\nfunction scheduleDisplayError () {\n  if (remainingError) clearTimeout(remainingError)\n  remainingError = setTimeout(displayError, 300)\n}\n\nasync function tryUpdateGraph () {\n  if (runningUpdate) return scheduleUpdateGraph()\n  clearTimeout(pendingUpdate)\n  pendingUpdate = undefined\n  runningUpdate = true\n  lastError = undefined\n  const value = source.value\n  if (value) {\n    try {\n      await graph.tryGraph(value)\n    } catch (error) {\n      runningUpdate = false\n      lastError = error\n      scheduleDisplayError()\n    }\n  } else {\n    graph.graph = value\n    forgetImage()\n  }\n}\n\nfunction scheduleUpdateGraph () {\n  if (pendingUpdate) clearTimeout(pendingUpdate)\n  pendingUpdate = setTimeout(tryUpdateGraph, 300)\n}\n\nfunction saveAsSVG () {\n  downloadFile(new Blob([svg], { type: 'image/svg+xml' }))\n}\n\nfunction saveAsPNG () {\n  downloadFile(png)\n}\n\nfunction saveAsText () {\n  downloadFile(new Blob([graph.graph], { type: 'text/plain' }))\n}\n\nsource.addEventListener('input', scheduleUpdateGraph)\ngraph.addEventListener('render', rememberImage)\ngraph.addEventListener('error', forgetImage)\nsaveSVG.addEventListener('click', saveAsSVG)\nsavePNG.addEventListener('click', saveAsPNG)\nsaveScript.addEventListener('click', saveAsText)\n"],"names":["source","document","getElementById","graph","saveSVG","savePNG","saveScript","svgSizeRegExp","svg","png","lastError","pendingUpdate","runningUpdate","remainingError","forgetImage","undefined","disabled","downloadFile","blob","link","createElement","type","download","body","appendChild","url","URL","createObjectURL","href","click","removeChild","revokeObjectURL","displayError","clearTimeout","value","async","tryUpdateGraph","scheduleUpdateGraph","tryGraph","error","setTimeout","setAttribute","getAttribute","addEventListener","detail","Promise","resolve","reject","size","exec","Error","canvas","width","height","context","getContext","image","onload","drawImage","toBlob","onerror","src","btoa","message","alert","Blob"],"mappings":"yBAAA,MAAMA,EAASC,SAASC,eAAe,UACjCC,EAAQF,SAASC,eAAe,SAChCE,EAAUH,SAASC,eAAe,YAClCG,EAAUJ,SAASC,eAAe,YAClCI,EAAaL,SAASC,eAAe,eACrCK,EAAgB,wCACtB,IAAIC,EAAKC,EAAKC,EAAWC,EAAeC,EAAeC,EAuCvD,SAASC,IACPN,EAAMC,EAAMG,EAAgBF,OAAYK,EACxCX,EAAQY,SAAWX,EAAQW,UAAW,EAGxC,SAASC,EAAcC,GACrB,MAAMC,EAAOlB,SAASmB,cAAc,KAC9BC,EAAOH,EAAKG,KAClBF,EAAKG,SAAoB,cAATD,EAAuB,YAC1B,kBAATA,EAA2B,YAAc,YAC7CpB,SAASsB,KAAKC,YAAYL,GAC1B,MAAMM,EAAMC,IAAIC,gBAAgBT,GAChCC,EAAKS,KAAOH,EACZN,EAAKU,QACL5B,SAASsB,KAAKO,YAAYX,GAC1BO,IAAIK,gBAAgBN,GAGtB,SAASO,IACPC,aAAapB,GACbA,OAAiBE,EACbJ,GAAiBC,IAAkBF,IACvCP,EAAMA,MAAQH,EAAOkC,OAQvBC,eAAeC,IACb,GAAIxB,EAAe,OAAOyB,IAC1BJ,aAAatB,GACbA,OAAgBI,EAChBH,GAAgB,EAChBF,OAAYK,EACZ,MAAMmB,EAAQlC,EAAOkC,MACrB,GAAIA,EACF,UACQ/B,EAAMmC,SAASJ,GACrB,MAAOK,GACP3B,GAAgB,EAChBF,EAAY6B,EAhBZ1B,GAAgBoB,aAAapB,GACjCA,EAAiB2B,WAAWR,EAAc,UAmBxC7B,EAAMA,MAAQ+B,EACdpB,IAIJ,SAASuB,IACH1B,GAAesB,aAAatB,GAChCA,EAAgB6B,WAAWJ,EAAgB,KA1F7CjC,EAAMsC,aAAa,QAASzC,EAAO0C,aAAa,UAyGhD1C,EAAO2C,iBAAiB,QAASN,GACjClC,EAAMwC,iBAAiB,UAlFvBR,gBAA8BS,OAAEA,IAC9BhC,GAAgB,EAChBF,OAAYK,EACZP,EAAMoC,EACNxC,EAAQY,UAAW,EACnB,IACEP,QA3BK,IAAIoC,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAOzC,EAAc0C,KAAKzC,GAChC,IAAKwC,EAAM,MAAM,IAAIE,MAAM,qBAC3B,MAAMC,EAASlD,SAASmB,cAAc,UACtC+B,EAAOC,MAAQJ,EAAK,GAAK,IACzBG,EAAOE,OAASL,EAAK,GAAK,IAC1B,MAAMM,EAAUH,EAAOI,WAAW,MAC5BC,EAAQvD,SAASmB,cAAc,OACrCoC,EAAMC,OAAS,KACb,IACEH,EAAQI,UAAUF,EAAO,EAAG,GAC5BL,EAAOQ,OAAOb,GACd,MAAOP,GACPQ,EAAOR,KAGXiB,EAAMI,QAAU,IAAMb,EAAO,IAAIG,MAAM,2BACvCM,EAAMK,IAAM,6BAA6BC,KAAKtD,KAW9CH,EAAQW,UAAW,EACnB,OAAO+C,QAAEA,IACTC,MAAMD,OA0EV5D,EAAMwC,iBAAiB,QAAS7B,GAChCV,EAAQuC,iBAAiB,SAfzB,WACE1B,EAAa,IAAIgD,KAAK,CAACzD,GAAM,CAAEa,KAAM,sBAevChB,EAAQsC,iBAAiB,SAZzB,WACE1B,EAAaR,MAYfH,EAAWqC,iBAAiB,SAT5B,WACE1B,EAAa,IAAIgD,KAAK,CAAC9D,EAAMA,OAAQ,CAAEkB,KAAM"}