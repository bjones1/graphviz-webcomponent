var graphvizElements = (function (exports) {
  'use strict';

  function cov_wa2qaios7(){var path="/Users/ferdipr/Sources/github/graphviz-webcomponent/src/graph.js";var hash="809923c0c11799b3cde5e6a5681e1f185e0dc72d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/ferdipr/Sources/github/graphviz-webcomponent/src/graph.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:32}},"1":{start:{line:2,column:17},end:{line:2,column:32}},"2":{start:{line:3,column:31},end:{line:3,column:64}},"3":{start:{line:6,column:0},end:{line:6,column:48}},"4":{start:{line:6,column:25},end:{line:6,column:48}},"5":{start:{line:9,column:2},end:{line:13,column:3}},"6":{start:{line:10,column:4},end:{line:12,column:42}},"7":{start:{line:17,column:2},end:{line:20,column:3}},"8":{start:{line:18,column:4},end:{line:18,column:25}},"9":{start:{line:19,column:4},end:{line:19,column:38}},"10":{start:{line:21,column:2},end:{line:21,column:17}},"11":{start:{line:25,column:19},end:{line:25,column:32}},"12":{start:{line:26,column:2},end:{line:26,column:53}},"13":{start:{line:27,column:2},end:{line:27,column:23}},"14":{start:{line:28,column:2},end:{line:28,column:59}},"15":{start:{line:32,column:19},end:{line:32,column:32}},"16":{start:{line:33,column:2},end:{line:33,column:56}},"17":{start:{line:37,column:2},end:{line:37,column:58}},"18":{start:{line:41,column:14},end:{line:41,column:44}},"19":{start:{line:42,column:16},end:{line:42,column:29}},"20":{start:{line:43,column:2},end:{line:51,column:3}},"21":{start:{line:44,column:4},end:{line:50,column:5}},"22":{start:{line:45,column:6},end:{line:45,column:45}},"23":{start:{line:46,column:6},end:{line:46,column:44}},"24":{start:{line:48,column:6},end:{line:48,column:30}},"25":{start:{line:49,column:6},end:{line:49,column:36}},"26":{start:{line:55,column:2},end:{line:55,column:36}},"27":{start:{line:56,column:2},end:{line:56,column:21}},"28":{start:{line:57,column:2},end:{line:57,column:38}},"29":{start:{line:61,column:2},end:{line:61,column:42}},"30":{start:{line:62,column:2},end:{line:62,column:46}},"31":{start:{line:63,column:2},end:{line:63,column:46}},"32":{start:{line:67,column:2},end:{line:67,column:35}},"33":{start:{line:68,column:2},end:{line:68,column:28}},"34":{start:{line:68,column:22},end:{line:68,column:28}},"35":{start:{line:69,column:2},end:{line:69,column:53}},"36":{start:{line:72,column:27},end:{line:72,column:31}},"37":{start:{line:73,column:4},end:{line:73,column:33}},"38":{start:{line:74,column:4},end:{line:77,column:5}},"39":{start:{line:75,column:6},end:{line:75,column:42}},"40":{start:{line:76,column:6},end:{line:76,column:38}},"41":{start:{line:78,column:4},end:{line:78,column:27}},"42":{start:{line:83,column:2},end:{line:99,column:4}},"43":{start:{line:84,column:4},end:{line:88,column:5}},"44":{start:{line:85,column:6},end:{line:85,column:28}},"45":{start:{line:86,column:6},end:{line:86,column:39}},"46":{start:{line:87,column:6},end:{line:87,column:22}},"47":{start:{line:89,column:4},end:{line:89,column:52}},"48":{start:{line:92,column:29},end:{line:92,column:33}},"49":{start:{line:93,column:6},end:{line:93,column:35}},"50":{start:{line:94,column:6},end:{line:94,column:37}},"51":{start:{line:94,column:17},end:{line:94,column:37}},"52":{start:{line:95,column:6},end:{line:95,column:32}},"53":{start:{line:96,column:6},end:{line:96,column:29}},"54":{start:{line:97,column:6},end:{line:97,column:18}},"55":{start:{line:104,column:4},end:{line:104,column:11}},"56":{start:{line:105,column:4},end:{line:105,column:39}},"57":{start:{line:108,column:17},end:{line:108,column:38}},"58":{start:{line:109,column:22},end:{line:109,column:55}},"59":{start:{line:111,column:17},end:{line:111,column:38}},"60":{start:{line:112,column:22},end:{line:112,column:55}},"61":{start:{line:115,column:4},end:{line:123,column:5}},"62":{start:{line:117,column:8},end:{line:117,column:33}},"63":{start:{line:118,column:8},end:{line:118,column:25}},"64":{start:{line:119,column:8},end:{line:119,column:13}},"65":{start:{line:121,column:8},end:{line:121,column:33}},"66":{start:{line:122,column:8},end:{line:122,column:24}},"67":{start:{line:127,column:4},end:{line:127,column:38}},"68":{start:{line:130,column:37},end:{line:130,column:62}},"69":{start:{line:133,column:0},end:{line:133,column:61}}},fnMap:{"0":{name:"ensureConfiguration",decl:{start:{line:8,column:9},end:{line:8,column:28}},loc:{start:{line:8,column:32},end:{line:14,column:1}},line:8},"1":{name:"getRenderer",decl:{start:{line:16,column:9},end:{line:16,column:20}},loc:{start:{line:16,column:24},end:{line:22,column:1}},line:16},"2":{name:"requestRendering",decl:{start:{line:24,column:9},end:{line:24,column:25}},loc:{start:{line:24,column:59},end:{line:29,column:1}},line:24},"3":{name:"closeRendering",decl:{start:{line:31,column:9},end:{line:31,column:23}},loc:{start:{line:31,column:40},end:{line:34,column:1}},line:31},"4":{name:"triggerEvent",decl:{start:{line:36,column:9},end:{line:36,column:21}},loc:{start:{line:36,column:46},end:{line:38,column:1}},line:36},"5":{name:"applyScale",decl:{start:{line:40,column:9},end:{line:40,column:19}},loc:{start:{line:40,column:30},end:{line:52,column:1}},line:40},"6":{name:"showImage",decl:{start:{line:54,column:9},end:{line:54,column:18}},loc:{start:{line:54,column:34},end:{line:58,column:1}},line:54},"7":{name:"showError",decl:{start:{line:60,column:9},end:{line:60,column:18}},loc:{start:{line:60,column:36},end:{line:64,column:1}},line:60},"8":{name:"updateGraph",decl:{start:{line:66,column:9},end:{line:66,column:20}},loc:{start:{line:66,column:31},end:{line:80,column:1}},line:66},"9":{name:"receiveResult",decl:{start:{line:71,column:11},end:{line:71,column:24}},loc:{start:{line:71,column:36},end:{line:79,column:3}},line:71},"10":{name:"tryUpdateGraph",decl:{start:{line:82,column:9},end:{line:82,column:23}},loc:{start:{line:82,column:42},end:{line:100,column:1}},line:82},"11":{name:"(anonymous_11)",decl:{start:{line:83,column:21},end:{line:83,column:22}},loc:{start:{line:83,column:42},end:{line:99,column:3}},line:83},"12":{name:"receiveResult",decl:{start:{line:91,column:13},end:{line:91,column:26}},loc:{start:{line:91,column:38},end:{line:98,column:5}},line:91},"13":{name:"(anonymous_13)",decl:{start:{line:103,column:2},end:{line:103,column:3}},loc:{start:{line:103,column:17},end:{line:106,column:3}},line:103},"14":{name:"(anonymous_14)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:15},end:{line:108,column:40}},line:108},"15":{name:"(anonymous_15)",decl:{start:{line:109,column:2},end:{line:109,column:3}},loc:{start:{line:109,column:20},end:{line:109,column:57}},line:109},"16":{name:"(anonymous_16)",decl:{start:{line:111,column:2},end:{line:111,column:3}},loc:{start:{line:111,column:15},end:{line:111,column:40}},line:111},"17":{name:"(anonymous_17)",decl:{start:{line:112,column:2},end:{line:112,column:3}},loc:{start:{line:112,column:20},end:{line:112,column:57}},line:112},"18":{name:"(anonymous_18)",decl:{start:{line:114,column:2},end:{line:114,column:3}},loc:{start:{line:114,column:54},end:{line:124,column:3}},line:114},"19":{name:"(anonymous_19)",decl:{start:{line:126,column:2},end:{line:126,column:3}},loc:{start:{line:126,column:19},end:{line:128,column:3}},line:126},"20":{name:"(anonymous_20)",decl:{start:{line:130,column:2},end:{line:130,column:3}},loc:{start:{line:130,column:35},end:{line:130,column:64}},line:130}},branchMap:{"0":{loc:{start:{line:3,column:31},end:{line:3,column:64}},type:"binary-expr",locations:[{start:{line:3,column:31},end:{line:3,column:58}},{start:{line:3,column:62},end:{line:3,column:64}}],line:3},"1":{loc:{start:{line:6,column:0},end:{line:6,column:48}},type:"if",locations:[{start:{line:6,column:0},end:{line:6,column:48}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:6},"2":{loc:{start:{line:9,column:2},end:{line:13,column:3}},type:"if",locations:[{start:{line:9,column:2},end:{line:13,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:9},"3":{loc:{start:{line:11,column:6},end:{line:11,column:88}},type:"default-arg",locations:[{start:{line:11,column:20},end:{line:11,column:88}}],line:11},"4":{loc:{start:{line:12,column:8},end:{line:12,column:41}},type:"binary-expr",locations:[{start:{line:12,column:8},end:{line:12,column:35}},{start:{line:12,column:39},end:{line:12,column:41}}],line:12},"5":{loc:{start:{line:17,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:17,column:2},end:{line:20,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:17},"6":{loc:{start:{line:28,column:33},end:{line:28,column:56}},type:"binary-expr",locations:[{start:{line:28,column:33},end:{line:28,column:39}},{start:{line:28,column:43},end:{line:28,column:56}}],line:28},"7":{loc:{start:{line:43,column:2},end:{line:51,column:3}},type:"if",locations:[{start:{line:43,column:2},end:{line:51,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:43},"8":{loc:{start:{line:44,column:4},end:{line:50,column:5}},type:"if",locations:[{start:{line:44,column:4},end:{line:50,column:5}},{start:{line:47,column:11},end:{line:50,column:5}}],line:44},"9":{loc:{start:{line:68,column:2},end:{line:68,column:28}},type:"if",locations:[{start:{line:68,column:2},end:{line:68,column:28}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:68},"10":{loc:{start:{line:74,column:4},end:{line:77,column:5}},type:"if",locations:[{start:{line:74,column:4},end:{line:77,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:74},"11":{loc:{start:{line:84,column:4},end:{line:88,column:5}},type:"if",locations:[{start:{line:84,column:4},end:{line:88,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:84},"12":{loc:{start:{line:94,column:6},end:{line:94,column:37}},type:"if",locations:[{start:{line:94,column:6},end:{line:94,column:37}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:94},"13":{loc:{start:{line:115,column:4},end:{line:123,column:5}},type:"switch",locations:[{start:{line:116,column:6},end:{line:119,column:13}},{start:{line:120,column:6},end:{line:122,column:24}}],line:115}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},inputSourceMap:{version:3,sources:["/Users/ferdipr/Sources/github/graphviz-webcomponent/src/graph.js"],sourcesContent:["const graphKey = Symbol('graph')\nconst scaleKey = Symbol('scale')\nconst { delayWorkerLoading } = window.graphvizWebComponent || {}\nlet renderer, rendererUrl\n\nif (!delayWorkerLoading) setTimeout(getRenderer)\n\nfunction ensureConfiguration () {\n  if (!rendererUrl) {\n    ({\n      rendererUrl = 'https://unpkg.com/graphviz-webcomponent@2.0.0/dist/renderer.min.js'\n    } = window.graphvizWebComponent || {})\n  }\n}\n\nfunction getRenderer () {\n  if (!renderer) {\n    ensureConfiguration()\n    renderer = new Worker(rendererUrl)\n  }\n  return renderer\n}\n\nfunction requestRendering (element, script, receiveResult) {\n  const renderer = getRenderer()\n  renderer.addEventListener('message', receiveResult)\n  ensureConfiguration()\n  renderer.postMessage({ script: script || element.graph })\n}\n\nfunction closeRendering (receiveResult) {\n  const renderer = getRenderer()\n  renderer.removeEventListener('message', receiveResult)\n}\n\nfunction triggerEvent (element, type, detail) {\n  element.dispatchEvent(new CustomEvent(type, { detail }))\n}\n\nfunction applyScale (element) {\n  const svg = element.shadowRoot.children[0]\n  const scale = element.scale\n  if (svg) {\n    if (scale) {\n      svg.style.transform = `scale(${scale})`\n      svg.style.transformOrigin = 'top left'\n    } else {\n      svg.style.transform = ''\n      svg.style.transformOrigin = ''\n    }\n  }\n}\n\nfunction showImage (element, svg) {\n  element.shadowRoot.innerHTML = svg\n  applyScale(element)\n  triggerEvent(element, 'render', svg)\n}\n\nfunction showError (element, error) {\n  console.error('Graphviz failed:', error)\n  element.shadowRoot.innerHTML = error.message\n  return triggerEvent(element, 'error', error)\n}\n\nfunction updateGraph (element) {\n  element.shadowRoot.innerHTML = ''\n  if (!element.graph) return\n  requestRendering(element, undefined, receiveResult)\n\n  function receiveResult ({ data }) {\n    const { svg, error } = data\n    closeRendering(receiveResult)\n    if (error) {\n      error.message = error.message.trim()\n      return showError(element, error)\n    }\n    showImage(element, svg)\n  }\n}\n\nfunction tryUpdateGraph (element, script) {\n  return new Promise((resolve, reject) => {\n    if (!script) {\n      element[graphKey] = ''\n      element.shadowRoot.innerHTML = ''\n      return resolve()\n    }\n    requestRendering(element, script, receiveResult)\n\n    function receiveResult ({ data }) {\n      const { svg, error } = data\n      closeRendering(receiveResult)\n      if (error) return reject(error)\n      element[graphKey] = script\n      showImage(element, svg)\n      resolve(svg)\n    }\n  })\n}\n\nclass GraphvizGraphElement extends HTMLElement {\n  constructor () {\n    super()\n    this.attachShadow({ mode: 'open' })\n  }\n\n  get graph () { return this[graphKey] }\n  set graph (value) { this.setAttribute('graph', value) }\n\n  get scale () { return this[scaleKey] }\n  set scale (value) { this.setAttribute('scale', value) }\n\n  attributeChangedCallback (name, oldValue, newValue) {\n    switch (name) {\n      case 'graph':\n        this[graphKey] = newValue\n        updateGraph(this)\n        break\n      case 'scale':\n        this[scaleKey] = newValue\n        applyScale(this)\n    }\n  }\n\n  tryGraph (graph) {\n    return tryUpdateGraph(this, graph)\n  }\n\n  static get observedAttributes () { return ['graph', 'scale'] }\n}\n\ncustomElements.define('graphviz-graph', GraphvizGraphElement)\n\nexport default GraphvizGraphElement\n"],names:[],mappings:"AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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C,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC;AACH,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChfile:null},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"809923c0c11799b3cde5e6a5681e1f185e0dc72d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
  cov_wa2qaios7=function(){return actualCoverage;};}return actualCoverage;}cov_wa2qaios7();const graphKey=(cov_wa2qaios7().s[0]++,Symbol('graph'));const scaleKey=(cov_wa2qaios7().s[1]++,Symbol('scale'));const{delayWorkerLoading}=(cov_wa2qaios7().s[2]++,(cov_wa2qaios7().b[0][0]++,window.graphvizWebComponent)||(cov_wa2qaios7().b[0][1]++,{}));let renderer,rendererUrl;cov_wa2qaios7().s[3]++;if(!delayWorkerLoading){cov_wa2qaios7().b[1][0]++;cov_wa2qaios7().s[4]++;setTimeout(getRenderer);}else {cov_wa2qaios7().b[1][1]++;}function ensureConfiguration(){cov_wa2qaios7().f[0]++;cov_wa2qaios7().s[5]++;if(!rendererUrl){cov_wa2qaios7().b[2][0]++;cov_wa2qaios7().s[6]++;({rendererUrl=(cov_wa2qaios7().b[3][0]++,'https://unpkg.com/graphviz-webcomponent@2.0.0/dist/renderer.min.js')}=(cov_wa2qaios7().b[4][0]++,window.graphvizWebComponent)||(cov_wa2qaios7().b[4][1]++,{}));}else {cov_wa2qaios7().b[2][1]++;}}function getRenderer(){cov_wa2qaios7().f[1]++;cov_wa2qaios7().s[7]++;if(!renderer){cov_wa2qaios7().b[5][0]++;cov_wa2qaios7().s[8]++;ensureConfiguration();cov_wa2qaios7().s[9]++;renderer=new Worker(rendererUrl);}else {cov_wa2qaios7().b[5][1]++;}cov_wa2qaios7().s[10]++;return renderer;}function requestRendering(element,script,receiveResult){cov_wa2qaios7().f[2]++;const renderer=(cov_wa2qaios7().s[11]++,getRenderer());cov_wa2qaios7().s[12]++;renderer.addEventListener('message',receiveResult);cov_wa2qaios7().s[13]++;ensureConfiguration();cov_wa2qaios7().s[14]++;renderer.postMessage({script:(cov_wa2qaios7().b[6][0]++,script)||(cov_wa2qaios7().b[6][1]++,element.graph)});}function closeRendering(receiveResult){cov_wa2qaios7().f[3]++;const renderer=(cov_wa2qaios7().s[15]++,getRenderer());cov_wa2qaios7().s[16]++;renderer.removeEventListener('message',receiveResult);}function triggerEvent$1(element,type,detail){cov_wa2qaios7().f[4]++;cov_wa2qaios7().s[17]++;element.dispatchEvent(new CustomEvent(type,{detail}));}function applyScale(element){cov_wa2qaios7().f[5]++;const svg=(cov_wa2qaios7().s[18]++,element.shadowRoot.children[0]);const scale=(cov_wa2qaios7().s[19]++,element.scale);cov_wa2qaios7().s[20]++;if(svg){cov_wa2qaios7().b[7][0]++;cov_wa2qaios7().s[21]++;if(scale){cov_wa2qaios7().b[8][0]++;cov_wa2qaios7().s[22]++;svg.style.transform=`scale(${scale})`;cov_wa2qaios7().s[23]++;svg.style.transformOrigin='top left';}else {cov_wa2qaios7().b[8][1]++;cov_wa2qaios7().s[24]++;svg.style.transform='';cov_wa2qaios7().s[25]++;svg.style.transformOrigin='';}}else {cov_wa2qaios7().b[7][1]++;}}function showImage(element,svg){cov_wa2qaios7().f[6]++;cov_wa2qaios7().s[26]++;element.shadowRoot.innerHTML=svg;cov_wa2qaios7().s[27]++;applyScale(element);cov_wa2qaios7().s[28]++;triggerEvent$1(element,'render',svg);}function showError(element,error){cov_wa2qaios7().f[7]++;cov_wa2qaios7().s[29]++;console.error('Graphviz failed:',error);cov_wa2qaios7().s[30]++;element.shadowRoot.innerHTML=error.message;cov_wa2qaios7().s[31]++;return triggerEvent$1(element,'error',error);}function updateGraph(element){cov_wa2qaios7().f[8]++;cov_wa2qaios7().s[32]++;element.shadowRoot.innerHTML='';cov_wa2qaios7().s[33]++;if(!element.graph){cov_wa2qaios7().b[9][0]++;cov_wa2qaios7().s[34]++;return;}else {cov_wa2qaios7().b[9][1]++;}cov_wa2qaios7().s[35]++;requestRendering(element,undefined,receiveResult);function receiveResult({data}){cov_wa2qaios7().f[9]++;const{svg,error}=(cov_wa2qaios7().s[36]++,data);cov_wa2qaios7().s[37]++;closeRendering(receiveResult);cov_wa2qaios7().s[38]++;if(error){cov_wa2qaios7().b[10][0]++;cov_wa2qaios7().s[39]++;error.message=error.message.trim();cov_wa2qaios7().s[40]++;return showError(element,error);}else {cov_wa2qaios7().b[10][1]++;}cov_wa2qaios7().s[41]++;showImage(element,svg);}}function tryUpdateGraph(element,script){cov_wa2qaios7().f[10]++;cov_wa2qaios7().s[42]++;return new Promise((resolve,reject)=>{cov_wa2qaios7().f[11]++;cov_wa2qaios7().s[43]++;if(!script){cov_wa2qaios7().b[11][0]++;cov_wa2qaios7().s[44]++;element[graphKey]='';cov_wa2qaios7().s[45]++;element.shadowRoot.innerHTML='';cov_wa2qaios7().s[46]++;return resolve();}else {cov_wa2qaios7().b[11][1]++;}cov_wa2qaios7().s[47]++;requestRendering(element,script,receiveResult);function receiveResult({data}){cov_wa2qaios7().f[12]++;const{svg,error}=(cov_wa2qaios7().s[48]++,data);cov_wa2qaios7().s[49]++;closeRendering(receiveResult);cov_wa2qaios7().s[50]++;if(error){cov_wa2qaios7().b[12][0]++;cov_wa2qaios7().s[51]++;return reject(error);}else {cov_wa2qaios7().b[12][1]++;}cov_wa2qaios7().s[52]++;element[graphKey]=script;cov_wa2qaios7().s[53]++;showImage(element,svg);cov_wa2qaios7().s[54]++;resolve(svg);}});}class GraphvizGraphElement extends HTMLElement{constructor(){cov_wa2qaios7().f[13]++;cov_wa2qaios7().s[55]++;super();cov_wa2qaios7().s[56]++;this.attachShadow({mode:'open'});}get graph(){cov_wa2qaios7().f[14]++;cov_wa2qaios7().s[57]++;return this[graphKey];}set graph(value){cov_wa2qaios7().f[15]++;cov_wa2qaios7().s[58]++;this.setAttribute('graph',value);}get scale(){cov_wa2qaios7().f[16]++;cov_wa2qaios7().s[59]++;return this[scaleKey];}set scale(value){cov_wa2qaios7().f[17]++;cov_wa2qaios7().s[60]++;this.setAttribute('scale',value);}attributeChangedCallback(name,oldValue,newValue){cov_wa2qaios7().f[18]++;cov_wa2qaios7().s[61]++;switch(name){case'graph':cov_wa2qaios7().b[13][0]++;cov_wa2qaios7().s[62]++;this[graphKey]=newValue;cov_wa2qaios7().s[63]++;updateGraph(this);cov_wa2qaios7().s[64]++;break;case'scale':cov_wa2qaios7().b[13][1]++;cov_wa2qaios7().s[65]++;this[scaleKey]=newValue;cov_wa2qaios7().s[66]++;applyScale(this);}}tryGraph(graph){cov_wa2qaios7().f[19]++;cov_wa2qaios7().s[67]++;return tryUpdateGraph(this,graph);}static get observedAttributes(){cov_wa2qaios7().f[20]++;cov_wa2qaios7().s[68]++;return ['graph','scale'];}}cov_wa2qaios7().s[69]++;customElements.define('graphviz-graph',GraphvizGraphElement);

  function CodeJar(editor, highlight, opt = {}) {
      const options = Object.assign({ tab: "\t", ownerRoot: window }, opt);
      // only Chrome supports shadowRoot.getSelection
      if (typeof options.ownerRoot.getSelection !== 'function') {
          options.ownerRoot = options.ownerRoot.ownerDocument;
          if (typeof options.ownerRoot.getSelection !== 'function') {
              throw new Error('Impossible to access text selections.');
          }
      }
      let listeners = [];
      let history = [];
      let at = -1;
      let focus = false;
      let callback;
      let prev; // code content prior keydown event
      let isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      editor.setAttribute("contentEditable", isFirefox ? "true" : "plaintext-only");
      editor.setAttribute("spellcheck", "false");
      editor.style.outline = "none";
      editor.style.overflowWrap = "break-word";
      editor.style.overflowY = "auto";
      editor.style.resize = "vertical";
      editor.style.whiteSpace = "pre-wrap";
      highlight(editor);
      const debounceHighlight = debounce(() => {
          const pos = save();
          highlight(editor);
          restore(pos);
      }, 30);
      let recording = false;
      const shouldRecord = (event) => {
          return !isUndo(event) && !isRedo(event)
              && event.key !== "Meta"
              && event.key !== "Control"
              && event.key !== "Alt"
              && !event.key.startsWith("Arrow");
      };
      const debounceRecordHistory = debounce((event) => {
          if (shouldRecord(event)) {
              recordHistory();
              recording = false;
          }
      }, 300);
      const on = (type, fn) => {
          listeners.push([type, fn]);
          editor.addEventListener(type, fn);
      };
      on("keydown", event => {
          if (event.defaultPrevented)
              return;
          prev = toString();
          handleNewLine(event);
          handleTabCharacters(event);
          handleJumpToBeginningOfLine(event);
          handleSelfClosingCharacters(event);
          handleUndoRedo(event);
          if (shouldRecord(event) && !recording) {
              recordHistory();
              recording = true;
          }
      });
      on("keyup", event => {
          if (event.defaultPrevented)
              return;
          if (event.isComposing)
              return;
          if (prev !== toString())
              debounceHighlight();
          debounceRecordHistory(event);
          if (callback)
              callback(toString());
      });
      on("focus", _event => {
          focus = true;
      });
      on("blur", _event => {
          focus = false;
      });
      on("paste", event => {
          recordHistory();
          handlePaste(event);
          recordHistory();
          if (callback)
              callback(toString());
      });
      function save() {
          const s = options.ownerRoot.getSelection();
          const pos = { start: 0, end: 0, dir: undefined };
          visit(editor, el => {
              if (el === s.anchorNode && el === s.focusNode) {
                  pos.start += s.anchorOffset;
                  pos.end += s.focusOffset;
                  pos.dir = s.anchorOffset <= s.focusOffset ? "->" : "<-";
                  return "stop";
              }
              if (el === s.anchorNode) {
                  pos.start += s.anchorOffset;
                  if (!pos.dir) {
                      pos.dir = "->";
                  }
                  else {
                      return "stop";
                  }
              }
              else if (el === s.focusNode) {
                  pos.end += s.focusOffset;
                  if (!pos.dir) {
                      pos.dir = "<-";
                  }
                  else {
                      return "stop";
                  }
              }
              if (el.nodeType === Node.TEXT_NODE) {
                  if (pos.dir != "->")
                      pos.start += el.nodeValue.length;
                  if (pos.dir != "<-")
                      pos.end += el.nodeValue.length;
              }
          });
          return pos;
      }
      function restore(pos) {
          const s = options.ownerRoot.getSelection();
          let startNode, startOffset = 0;
          let endNode, endOffset = 0;
          if (!pos.dir)
              pos.dir = "->";
          if (pos.start < 0)
              pos.start = 0;
          if (pos.end < 0)
              pos.end = 0;
          // Flip start and end if the direction reversed
          if (pos.dir == "<-") {
              const { start, end } = pos;
              pos.start = end;
              pos.end = start;
          }
          let current = 0;
          visit(editor, el => {
              if (el.nodeType !== Node.TEXT_NODE)
                  return;
              const len = (el.nodeValue || "").length;
              if (current + len >= pos.start) {
                  if (!startNode) {
                      startNode = el;
                      startOffset = pos.start - current;
                  }
                  if (current + len >= pos.end) {
                      endNode = el;
                      endOffset = pos.end - current;
                      return "stop";
                  }
              }
              current += len;
          });
          // If everything deleted place cursor at editor
          if (!startNode)
              startNode = editor;
          if (!endNode)
              endNode = editor;
          // Flip back the selection
          if (pos.dir == "<-") {
              [startNode, startOffset, endNode, endOffset] = [endNode, endOffset, startNode, startOffset];
          }
          s.setBaseAndExtent(startNode, startOffset, endNode, endOffset);
      }
      function beforeCursor() {
          const s = options.ownerRoot.getSelection();
          const r0 = s.getRangeAt(0);
          const r = document.createRange();
          r.selectNodeContents(editor);
          r.setEnd(r0.startContainer, r0.startOffset);
          return r.toString();
      }
      function afterCursor() {
          const s = options.ownerRoot.getSelection();
          const r0 = s.getRangeAt(0);
          const r = document.createRange();
          r.selectNodeContents(editor);
          r.setStart(r0.endContainer, r0.endOffset);
          return r.toString();
      }
      function handleNewLine(event) {
          if (event.key === "Enter") {
              const before = beforeCursor();
              const after = afterCursor();
              let [padding] = findPadding(before);
              let newLinePadding = padding;
              // If last symbol is "{" ident new line
              if (before[before.length - 1] === "{") {
                  newLinePadding += options.tab;
              }
              if (isFirefox) {
                  preventDefault(event);
                  insert("\n" + newLinePadding);
              }
              else {
                  // Normal browsers
                  if (newLinePadding.length > 0) {
                      preventDefault(event);
                      insert("\n" + newLinePadding);
                  }
              }
              // Place adjacent "}" on next line
              if (newLinePadding !== padding && after[0] === "}") {
                  const pos = save();
                  insert("\n" + padding);
                  restore(pos);
              }
          }
      }
      function handleSelfClosingCharacters(event) {
          const open = `([{'"`;
          const close = `)]}'"`;
          const codeAfter = afterCursor();
          if (close.includes(event.key) && codeAfter.substr(0, 1) === event.key) {
              const pos = save();
              preventDefault(event);
              pos.start = ++pos.end;
              restore(pos);
          }
          else if (open.includes(event.key)) {
              const pos = save();
              preventDefault(event);
              const text = event.key + close[open.indexOf(event.key)];
              insert(text);
              pos.start = ++pos.end;
              restore(pos);
          }
      }
      function handleTabCharacters(event) {
          if (event.key === "Tab") {
              preventDefault(event);
              if (event.shiftKey) {
                  const before = beforeCursor();
                  let [padding, start,] = findPadding(before);
                  if (padding.length > 0) {
                      const pos = save();
                      // Remove full length tab or just remaining padding
                      const len = Math.min(options.tab.length, padding.length);
                      restore({ start, end: start + len });
                      document.execCommand("delete");
                      pos.start -= len;
                      pos.end -= len;
                      restore(pos);
                  }
              }
              else {
                  insert(options.tab);
              }
          }
      }
      function handleJumpToBeginningOfLine(event) {
          if (event.key === "ArrowLeft" && event.metaKey) {
              preventDefault(event);
              const before = beforeCursor();
              let [padding, start, end] = findPadding(before);
              if (before.endsWith(padding)) {
                  if (event.shiftKey) {
                      const pos = save();
                      restore({ start, end: pos.end }); // Select from line start.
                  }
                  else {
                      restore({ start, end: start }); // Jump to line start.
                  }
              }
              else {
                  if (event.shiftKey) {
                      const pos = save();
                      restore({ start: end, end: pos.end }); // Select from beginning of text.
                  }
                  else {
                      restore({ start: end, end }); // Jump to beginning of text.
                  }
              }
          }
      }
      function handleUndoRedo(event) {
          if (isUndo(event)) {
              preventDefault(event);
              at--;
              const record = history[at];
              if (record) {
                  editor.innerHTML = record.html;
                  restore(record.pos);
              }
              if (at < 0)
                  at = 0;
          }
          if (isRedo(event)) {
              preventDefault(event);
              at++;
              const record = history[at];
              if (record) {
                  editor.innerHTML = record.html;
                  restore(record.pos);
              }
              if (at >= history.length)
                  at--;
          }
      }
      function recordHistory() {
          if (!focus)
              return;
          const html = editor.innerHTML;
          const pos = save();
          const lastRecord = history[at];
          if (lastRecord) {
              if (lastRecord.html === html
                  && lastRecord.pos.start === pos.start
                  && lastRecord.pos.end === pos.end)
                  return;
          }
          at++;
          history[at] = { html, pos };
          history.splice(at + 1);
          const maxHistory = 300;
          if (at > maxHistory) {
              at = maxHistory;
              history.splice(0, 1);
          }
      }
      function handlePaste(event) {
          preventDefault(event);
          const text = (event.originalEvent || event).clipboardData.getData("text/plain");
          const pos = save();
          insert(text);
          highlight(editor);
          restore({ start: pos.end + text.length, end: pos.end + text.length });
      }
      function visit(editor, visitor) {
          const queue = [];
          if (editor.firstChild)
              queue.push(editor.firstChild);
          let el = queue.pop();
          while (el) {
              if (visitor(el) === "stop")
                  break;
              if (el.nextSibling)
                  queue.push(el.nextSibling);
              if (el.firstChild)
                  queue.push(el.firstChild);
              el = queue.pop();
          }
      }
      function isCtrl(event) {
          return event.metaKey || event.ctrlKey;
      }
      function isUndo(event) {
          return isCtrl(event) && !event.shiftKey && event.code === "KeyZ";
      }
      function isRedo(event) {
          return isCtrl(event) && event.shiftKey && event.code === "KeyZ";
      }
      function insert(text) {
          text = text
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
          document.execCommand("insertHTML", false, text);
      }
      function debounce(cb, wait) {
          let timeout = 0;
          return (...args) => {
              clearTimeout(timeout);
              timeout = window.setTimeout(() => cb(...args), wait);
          };
      }
      function findPadding(text) {
          // Find beginning of previous line.
          let i = text.length - 1;
          while (i >= 0 && text[i] !== "\n")
              i--;
          i++;
          // Find padding of the line.
          let j = i;
          while (j < text.length && /[ \t]/.test(text[j]))
              j++;
          return [text.substring(i, j) || "", i, j];
      }
      function toString() {
          return editor.textContent || "";
      }
      function preventDefault(event) {
          event.preventDefault();
      }
      return {
          updateOptions(options) {
              options = Object.assign(Object.assign({}, options), options);
          },
          updateCode(code) {
              editor.textContent = code;
              highlight(editor);
          },
          onUpdate(cb) {
              callback = cb;
          },
          toString,
          destroy() {
              for (let [type, fn] of listeners) {
                  editor.removeEventListener(type, fn);
              }
          },
      };
  }

  /**
   * Prism: Lightweight, robust, elegant syntax highlighting
   * MIT license http://www.opensource.org/licenses/mit-license.php/
   * @author Lea Verou http://lea.verou.me
   */

  // Private helper vars
  var lang = /\blang(?:uage)?-([\w-]+)\b/i;
  var uniqueId = 0;

  var _;
  var Prism = _ = {
  	codeTag: 'code',

  	util: {
  		encode: function encode(tokens) {
  			if (tokens instanceof Token) {
  				return new Token(tokens.type, encode(tokens.content), tokens.alias);
  			} else if (Array.isArray(tokens)) {
  				return tokens.map(encode);
  			} else {
  				return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
  			}
  		},

  		type: function (o) {
  			return Object.prototype.toString.call(o).slice(8, -1);
  		},

  		objId: function (obj) {
  			if (!obj['__id']) {
  				Object.defineProperty(obj, '__id', { value: ++uniqueId });
  			}
  			return obj['__id'];
  		},

  		// Deep clone a language definition (e.g. to extend it)
  		clone: function deepClone(o, visited) {
  			var clone, id, type = _.util.type(o);
  			visited = visited || {};

  			switch (type) {
  				case 'Object':
  					id = _.util.objId(o);
  					if (visited[id]) {
  						return visited[id];
  					}
  					clone = {};
  					visited[id] = clone;

  					for (var key in o) {
  						if (o.hasOwnProperty(key)) {
  							clone[key] = deepClone(o[key], visited);
  						}
  					}

  					return clone;

  				case 'Array':
  					id = _.util.objId(o);
  					if (visited[id]) {
  						return visited[id];
  					}
  					clone = [];
  					visited[id] = clone;

  					o.forEach(function (v, i) {
  						clone[i] = deepClone(v, visited);
  					});

  					return clone;

  				default:
  					return o;
  			}
  		},

  		/**
  		 * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
  		 *
  		 * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
  		 *
  		 * @param {Element} element
  		 * @returns {string}
  		 */
  		getLanguage: function (element) {
  			while (element && !lang.test(element.className)) {
  				element = element.parentElement;
  			}
  			if (element) {
  				return (element.className.match(lang) || [, 'none'])[1].toLowerCase();
  			}
  			return 'none';
  		}
  	},

  	languages: {
  		extend: function (id, redef) {
  			var lang = _.util.clone(_.languages[id]);

  			for (var key in redef) {
  				lang[key] = redef[key];
  			}

  			return lang;
  		},

  		/**
  		 * Insert a token before another token in a language literal
  		 * As this needs to recreate the object (we cannot actually insert before keys in object literals),
  		 * we cannot just provide an object, we need an object and a key.
  		 * @param inside The key (or language id) of the parent
  		 * @param before The key to insert before.
  		 * @param insert Object with the key/value pairs to insert
  		 * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
  		 */
  		insertBefore: function (inside, before, insert, root) {
  			root = root || _.languages;
  			var grammar = root[inside];
  			var ret = {};

  			for (var token in grammar) {
  				if (grammar.hasOwnProperty(token)) {

  					if (token == before) {
  						for (var newToken in insert) {
  							if (insert.hasOwnProperty(newToken)) {
  								ret[newToken] = insert[newToken];
  							}
  						}
  					}

  					// Do not insert token which also occur in insert. See #1525
  					if (!insert.hasOwnProperty(token)) {
  						ret[token] = grammar[token];
  					}
  				}
  			}

  			var old = root[inside];
  			root[inside] = ret;

  			// Update references in other language definitions
  			_.languages.DFS(_.languages, function(key, value) {
  				if (value === old && key != inside) {
  					this[key] = ret;
  				}
  			});

  			return ret;
  		},

  		// Traverse a language definition with Depth First Search
  		DFS: function DFS(o, callback, type, visited) {
  			visited = visited || {};

  			var objId = _.util.objId;

  			for (var i in o) {
  				if (o.hasOwnProperty(i)) {
  					callback.call(o, i, o[i], type || i);

  					var property = o[i],
  					    propertyType = _.util.type(property);

  					if (propertyType === 'Object' && !visited[objId(property)]) {
  						visited[objId(property)] = true;
  						DFS(property, callback, null, visited);
  					}
  					else if (propertyType === 'Array' && !visited[objId(property)]) {
  						visited[objId(property)] = true;
  						DFS(property, callback, i, visited);
  					}
  				}
  			}
  		}
  	},
  	plugins: {},

  	highlightElement: function(element, callback) {
  		// Find language
  		var language = _.util.getLanguage(element);
  		var grammar = _.languages[language];

  		// Set language on the element, if not present
  		element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

  		// Set language on the parent, for styling
  		var parent = element.parentNode;
  		if (parent && parent.nodeName.toLowerCase() === 'pre') {
  			parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
  		}

  		var code = element.textContent;

  		var env = {
  			element: element,
  			language: language,
  			grammar: grammar,
  			code: code
  		};

  		function insertHighlightedCode(highlightedCode) {
  			env.highlightedCode = highlightedCode;

  			_.hooks.run('before-insert', env);

  			env.element.innerHTML = env.highlightedCode;

  			_.hooks.run('after-highlight', env);
  			_.hooks.run('complete', env);
  			callback && callback.call(env.element);
  		}

  		_.hooks.run('before-sanity-check', env);

  		if (!env.code) {
  			_.hooks.run('complete', env);
  			callback && callback.call(env.element);
  			return;
  		}

  		_.hooks.run('before-highlight', env);

  		if (!env.grammar) {
  			insertHighlightedCode(_.util.encode(env.code));
  			return;
  		}

  		insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
  	},

  	highlight: function (text, grammar, language) {
  		var env = {
  			code: text,
  			grammar: grammar,
  			language: language
  		};
  		_.hooks.run('before-tokenize', env);
  		env.tokens = _.tokenize(env.code, env.grammar);
  		_.hooks.run('after-tokenize', env);
  		return Token.stringify(_.util.encode(env.tokens), env.language);
  	},

  	tokenize: function(text, grammar) {
  		var rest = grammar.rest;
  		if (rest) {
  			for (var token in rest) {
  				grammar[token] = rest[token];
  			}

  			delete grammar.rest;
  		}

  		var tokenList = new LinkedList();
  		addAfter(tokenList, tokenList.head, text);

  		matchGrammar(text, tokenList, grammar, tokenList.head, 0);

  		return toArray(tokenList);
  	},

  	hooks: {
  		all: {},

  		add: function (name, callback) {
  			var hooks = _.hooks.all;

  			hooks[name] = hooks[name] || [];

  			hooks[name].push(callback);
  		},

  		run: function (name, env) {
  			var callbacks = _.hooks.all[name];

  			if (!callbacks || !callbacks.length) {
  				return;
  			}

  			for (var i=0, callback; callback = callbacks[i++];) {
  				callback(env);
  			}
  		}
  	},

  	Token: Token
  };

  function Token(type, content, alias, matchedStr, greedy) {
  	this.type = type;
  	this.content = content;
  	this.alias = alias;
  	// Copy of the full string this token was created from
  	this.length = (matchedStr || '').length|0;
  	this.greedy = !!greedy;
  }

  Token.stringify = function stringify(o, language) {
  	if (typeof o == 'string') {
  		return o;
  	}
  	if (Array.isArray(o)) {
  		var s = '';
  		o.forEach(function (e) {
  			s += stringify(e, language);
  		});
  		return s;
  	}

  	var env = {
  		type: o.type,
  		content: stringify(o.content, language),
  		tag: 'span',
  		classes: ['token', o.type],
  		attributes: {},
  		language: language
  	};

  	var aliases = o.alias;
  	if (aliases) {
  		if (Array.isArray(aliases)) {
  			Array.prototype.push.apply(env.classes, aliases);
  		} else {
  			env.classes.push(aliases);
  		}
  	}

  	_.hooks.run('wrap', env);

  	var attributes = '';
  	for (var name in env.attributes) {
  		attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
  	}

  	return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
  };

  /**
   * @param {string} text
   * @param {LinkedList<string | Token>} tokenList
   * @param {any} grammar
   * @param {LinkedListNode<string | Token>} startNode
   * @param {number} startPos
   * @param {boolean} [oneshot=false]
   * @param {string} [target]
   */
  function matchGrammar(text, tokenList, grammar, startNode, startPos, oneshot, target) {
  	for (var token in grammar) {
  		if (!grammar.hasOwnProperty(token) || !grammar[token]) {
  			continue;
  		}

  		var patterns = grammar[token];
  		patterns = Array.isArray(patterns) ? patterns : [patterns];

  		for (var j = 0; j < patterns.length; ++j) {
  			if (target && target == token + ',' + j) {
  				return;
  			}

  			var pattern = patterns[j],
  				inside = pattern.inside,
  				lookbehind = !!pattern.lookbehind,
  				greedy = !!pattern.greedy,
  				lookbehindLength = 0,
  				alias = pattern.alias;

  			if (greedy && !pattern.pattern.global) {
  				// Without the global flag, lastIndex won't work
  				var flags = pattern.pattern.toString().match(/[imsuy]*$/)[0];
  				pattern.pattern = RegExp(pattern.pattern.source, flags + 'g');
  			}

  			pattern = pattern.pattern || pattern;

  			for ( // iterate the token list and keep track of the current token/string position
  				var currentNode = startNode.next, pos = startPos;
  				currentNode !== tokenList.tail;
  				pos += currentNode.value.length, currentNode = currentNode.next
  			) {

  				var str = currentNode.value;

  				if (tokenList.length > text.length) {
  					// Something went terribly wrong, ABORT, ABORT!
  					return;
  				}

  				if (str instanceof Token) {
  					continue;
  				}

  				var removeCount = 1; // this is the to parameter of removeBetween

  				if (greedy && currentNode != tokenList.tail.prev) {
  					pattern.lastIndex = pos;
  					var match = pattern.exec(text);
  					if (!match) {
  						break;
  					}

  					var from = match.index + (lookbehind && match[1] ? match[1].length : 0);
  					var to = match.index + match[0].length;
  					var p = pos;

  					// find the node that contains the match
  					p += currentNode.value.length;
  					while (from >= p) {
  						currentNode = currentNode.next;
  						p += currentNode.value.length;
  					}
  					// adjust pos (and p)
  					p -= currentNode.value.length;
  					pos = p;

  					// the current node is a Token, then the match starts inside another Token, which is invalid
  					if (currentNode.value instanceof Token) {
  						continue;
  					}

  					// find the last node which is affected by this match
  					for (
  						var k = currentNode;
  						k !== tokenList.tail && (p < to || (typeof k.value === 'string' && !k.prev.value.greedy));
  						k = k.next
  					) {
  						removeCount++;
  						p += k.value.length;
  					}
  					removeCount--;

  					// replace with the new match
  					str = text.slice(pos, p);
  					match.index -= pos;
  				} else {
  					pattern.lastIndex = 0;

  					var match = pattern.exec(str);
  				}

  				if (!match) {
  					if (oneshot) {
  						break;
  					}

  					continue;
  				}

  				if (lookbehind) {
  					lookbehindLength = match[1] ? match[1].length : 0;
  				}

  				var from = match.index + lookbehindLength,
  					match = match[0].slice(lookbehindLength),
  					to = from + match.length,
  					before = str.slice(0, from),
  					after = str.slice(to);

  				var removeFrom = currentNode.prev;

  				if (before) {
  					removeFrom = addAfter(tokenList, removeFrom, before);
  					pos += before.length;
  				}

  				removeRange(tokenList, removeFrom, removeCount);

  				var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);
  				currentNode = addAfter(tokenList, removeFrom, wrapped);

  				if (after) {
  					addAfter(tokenList, currentNode, after);
  				}


  				if (removeCount > 1)
  					matchGrammar(text, tokenList, grammar, currentNode.prev, pos, true, token + ',' + j);

  				if (oneshot)
  					break;
  			}
  		}
  	}
  }

  /**
   * @typedef LinkedListNode
   * @property {T} value
   * @property {LinkedListNode<T> | null} prev The previous node.
   * @property {LinkedListNode<T> | null} next The next node.
   * @template T
   */

  /**
   * @template T
   */
  function LinkedList() {
  	/** @type {LinkedListNode<T>} */
  	var head = { value: null, prev: null, next: null };
  	/** @type {LinkedListNode<T>} */
  	var tail = { value: null, prev: head, next: null };
  	head.next = tail;

  	/** @type {LinkedListNode<T>} */
  	this.head = head;
  	/** @type {LinkedListNode<T>} */
  	this.tail = tail;
  	this.length = 0;
  }

  /**
   * Adds a new node with the given value to the list.
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {T} value
   * @returns {LinkedListNode<T>} The added node.
   * @template T
   */
  function addAfter(list, node, value) {
  	// assumes that node != list.tail && values.length >= 0
  	var next = node.next;

  	var newNode = { value: value, prev: node, next: next };
  	node.next = newNode;
  	next.prev = newNode;
  	list.length++;

  	return newNode;
  }
  /**
   * Removes `count` nodes after the given node. The given node will not be removed.
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {number} count
   * @template T
   */
  function removeRange(list, node, count) {
  	var next = node.next;
  	for (var i = 0; i < count && next !== list.tail; i++) {
  		next = next.next;
  	}
  	node.next = next;
  	next.prev = node;
  	list.length -= i;
  }
  /**
   * @param {LinkedList<T>} list
   * @returns {T[]}
   * @template T
   */
  function toArray(list) {
  	var array = [];
  	var node = list.head.next;
  	while (node !== list.tail) {
  		array.push(node.value);
  		node = node.next;
  	}
  	return array;
  }

  var lightTheme = "/**\n * VS theme by Andrew Lock (https://andrewlock.net)\n * Inspired by Visual Studio syntax coloring\n */\n\n code[class*=\"language-\"],\n pre[class*=\"language-\"] {\n   color: #393A34;\n   /* font-family: \"Consolas\", \"Bitstream Vera Sans Mono\", \"Courier New\", Courier, monospace; */\n   direction: ltr;\n   text-align: left;\n   white-space: pre;\n   word-spacing: normal;\n   word-break: normal;\n   /* font-size: .9em; */\n   /* line-height: 1.2em; */\n \n   /* -moz-tab-size: 4; */\n   /* -o-tab-size: 4; */\n   /* tab-size: 4; */\n \n   -webkit-hyphens: none;\n   -moz-hyphens: none;\n   -ms-hyphens: none;\n   hyphens: none;\n }\n \n pre > code[class*=\"language-\"] {\n   font-size: 1em;\n }\n \n pre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\n code[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n   background: #C1DEF1;\n }\n \n pre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\n code[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n   background: #C1DEF1;\n }\n \n /* Code blocks */\n pre[class*=\"language-\"] {\n   padding: 1em;\n   margin: .5em 0;\n   overflow: auto;\n   border: 1px solid #dddddd;\n   background-color: white;\n }\n \n /* Inline code */\n :not(pre) > code[class*=\"language-\"] {\n   padding: .2em;\n   padding-top: 1px;\n   padding-bottom: 1px;\n   background: #f8f8f8;\n   border: 1px solid #dddddd;\n }\n \n .token.comment,\n .token.prolog,\n .token.doctype,\n .token.cdata {\n   color: #008000;\n   font-style: italic;\n }\n \n .token.namespace {\n   opacity: .7;\n }\n \n .token.string {\n   color: #A31515;\n }\n \n .token.punctuation,\n .token.operator {\n   color: #393A34; /* no highlight */\n }\n \n .token.url,\n .token.symbol,\n .token.number,\n .token.boolean,\n .token.variable,\n .token.constant,\n .token.inserted {\n   color: #36acaa;\n }\n \n .token.atrule,\n .token.keyword,\n .token.attr-value,\n .language-autohotkey .token.selector,\n .language-json .token.boolean,\n .language-json .token.number,\n code[class*=\"language-css\"] {\n   color: #0000ff;\n }\n \n .token.function {\n   color: #393A34;\n }\n \n .token.deleted,\n .language-autohotkey .token.tag {\n   color: #9a050f;\n }\n \n .token.selector,\n .language-autohotkey .token.keyword {\n   color: #00009f;\n }\n \n .token.important,\n .token.bold {\n   font-weight: bold;\n }\n \n .token.italic {\n   font-style: italic;\n }\n \n .token.class-name,\n .language-json .token.property {\n   color: #2B91AF;\n }\n \n .token.tag,\n .token.selector {\n   color: #800000;\n }\n \n .token.attr-name,\n .token.property,\n .token.regex,\n .token.entity {\n   color: #ff0000;\n }\n \n .token.directive.tag .tag {\n   background: #ffff00;\n   color: #393A34;\n }\n \n /* overrides color-values for the Line Numbers plugin\n  * http://prismjs.com/plugins/line-numbers/\n  */\n\n .line-numbers .line-numbers-rows {\n   border-right-color: #a5a5a5;\n }\n \n .line-numbers-rows > span:before {\n   color: #2B91AF;\n }\n \n /* overrides color-values for the Line Highlight plugin\n * http://prismjs.com/plugins/line-highlight/\n */\n \n .line-highlight {\n   background: rgba(193, 222, 241, 0.2);\n   background: -webkit-linear-gradient(left, rgba(193, 222, 241, 0.2) 70%, rgba(221, 222, 241, 0));\n   background: linear-gradient(to right, rgba(193, 222, 241, 0.2) 70%, rgba(221, 222, 241, 0));\n }\n";

  var lineNumbersStyle = "pre[class*=\"language-\"].line-numbers {\n\tposition: relative;\n\tpadding-left: 3.8em;\n\tcounter-reset: linenumber;\n}\n\npre[class*=\"language-\"].line-numbers > div {\n\tposition: relative;\n\twhite-space: inherit;\n}\n\n.line-numbers .line-numbers-rows {\n\tposition: absolute;\n\tpointer-events: none;\n\ttop: 0;\n\tfont-size: 100%;\n\tleft: -3.8em;\n\twidth: 3em; /* works for line-numbers below 1000 lines */\n\tletter-spacing: -1px;\n\tborder-right: 1px solid #999;\n\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n\n}\n\n\t.line-numbers-rows > span {\n\t\tpointer-events: none;\n\t\tdisplay: block;\n\t\tcounter-increment: linenumber;\n\t}\n\n\t\t.line-numbers-rows > span:before {\n\t\t\tcontent: counter(linenumber);\n\t\t\tcolor: #999;\n\t\t\tdisplay: block;\n\t\t\tpadding-right: 0.8em;\n\t\t\ttext-align: right;\n\t\t}\n";

  var matchBracesStyle = ".token.punctuation.brace-hover,\n.token.punctuation.brace-selected {\n\toutline: solid 1px;\n}\n\n.rainbow-braces .token.punctuation.brace-level-1,\n.rainbow-braces .token.punctuation.brace-level-5,\n.rainbow-braces .token.punctuation.brace-level-9 {\n\tcolor: #E50;\n\topacity: 1;\n}\n.rainbow-braces .token.punctuation.brace-level-2,\n.rainbow-braces .token.punctuation.brace-level-6,\n.rainbow-braces .token.punctuation.brace-level-10 {\n\tcolor: #0B3;\n\topacity: 1;\n}\n.rainbow-braces .token.punctuation.brace-level-3,\n.rainbow-braces .token.punctuation.brace-level-7,\n.rainbow-braces .token.punctuation.brace-level-11 {\n\tcolor: #26F;\n\topacity: 1;\n}\n.rainbow-braces .token.punctuation.brace-level-4,\n.rainbow-braces .token.punctuation.brace-level-8,\n.rainbow-braces .token.punctuation.brace-level-12 {\n\tcolor: #E0E;\n\topacity: 1;\n}\n";

  function cov_1e1mt9qmc8(){var path="/Users/ferdipr/Sources/github/graphviz-webcomponent/src/script-editor.css";var hash="5aeb47bb1eff6813eed1a5c0a199571b1aadfa3f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/ferdipr/Sources/github/graphviz-webcomponent/src/script-editor.css",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},inputSourceMap:{version:3,sources:[],sourcesContent:[],names:[],mappings:"",file:null},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5aeb47bb1eff6813eed1a5c0a199571b1aadfa3f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
  cov_1e1mt9qmc8=function(){return actualCoverage;};}return actualCoverage;}cov_1e1mt9qmc8();var mainStyle = ":host {\n  display: block;\n  border: 1px black solid;\n  border-radius: .5ex;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  resize: both;\n  overflow: auto;\n}\n\n#source-wrapper {\n  width: calc(100% - 2em - 2px);\n  height: calc(100% - 2px);\n  padding-top: 0;\n  padding-bottom: 0;\n  white-space: pre-wrap;\n}\n\n#source-wrapper.line-numbers {\n  width: calc(100% - 4.8em - 2px);\n  margin: 0;\n}\n\n#source {\n  font-family: \"SFMono-Regular\", Menlo, Monaco, Consolas, \"Ubuntu Mono\", \"Liberation Mono\", \"Lucida Console\", \"Courier New\", monospace;\n  tab-size: 2;\n  overflow-y: visible !important;\n}\n";

  /**
   * Plugin name which is used as a class name for <pre> which is activating the plugin
   * @type {String}
   */
  var PLUGIN_NAME = 'line-numbers';

  /**
   * Regular expression used for determining line breaks
   * @type {RegExp}
   */
  var NEW_LINE_EXP = /\n(?!$)/g;

  /**
   * Resizes line numbers spans according to height of line of code
   * @param {Element} element <pre> element
   */
  var _resizeElement = function (element) {
  	var codeStyles = getStyles(element);
  	var whiteSpace = codeStyles['white-space'];

  	if (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {
  		var codeElement = element.querySelector(Prism.codeTag);
  		var lineNumbersWrapper = element.querySelector('.line-numbers-rows');
  		var lineNumberSizer = element.querySelector('.line-numbers-sizer');
  		var codeLines = codeElement.textContent.split(NEW_LINE_EXP);

  		if (!lineNumberSizer) {
  			lineNumberSizer = document.createElement('span');
  			lineNumberSizer.className = 'line-numbers-sizer';

  			codeElement.appendChild(lineNumberSizer);
  		}

  		lineNumberSizer.style.display = 'block';

  		codeLines.forEach(function (line, lineNumber) {
  			lineNumberSizer.textContent = line || '\n';
  			var lineSize = lineNumberSizer.getBoundingClientRect().height;
  			lineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';
  		});

  		lineNumberSizer.textContent = '';
  		lineNumberSizer.style.display = 'none';
  	}
  };

  /**
   * Returns style declarations for the element
   * @param {Element} element
   */
  var getStyles = function (element) {
  	if (!element) {
  		return null;
  	}

  	return window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);
  };

  Prism.hooks.add('complete', function (env) {
  	if (!env.code) {
  		return;
  	}

  	var code = env.element;
  	var pre = code.parentNode;

  	// works only for <code> wrapped inside <pre> (not inline)
  	if (!pre || !/pre/i.test(pre.nodeName)) {
  		return;
  	}

  	// Abort if line numbers already exists
  	if (code.querySelector('.line-numbers-rows')) {
  		return;
  	}

  	var addLineNumbers = false;
  	var lineNumbersRegex = /(?:^|\s)line-numbers(?:\s|$)/;

  	for (var element = code; element; element = element.parentNode) {
  		if (lineNumbersRegex.test(element.className)) {
  			addLineNumbers = true;
  			break;
  		}
  	}

  	// only add line numbers if <code> or one of its ancestors has the `line-numbers` class
  	if (!addLineNumbers) {
  		return;
  	}

  	// Remove the class 'line-numbers' from the <code>
  	code.className = code.className.replace(lineNumbersRegex, ' ');
  	// Add the class 'line-numbers' to the <pre>
  	if (!lineNumbersRegex.test(pre.className)) {
  		pre.className += ' line-numbers';
  	}

  	var match = env.code.match(NEW_LINE_EXP);
  	var linesNum = match ? match.length + 1 : 1;
  	var lineNumbersWrapper;

  	var lines = new Array(linesNum + 1).join('<span></span>');

  	lineNumbersWrapper = document.createElement('span');
  	lineNumbersWrapper.setAttribute('aria-hidden', 'true');
  	lineNumbersWrapper.className = 'line-numbers-rows';
  	lineNumbersWrapper.innerHTML = lines;

  	if (pre.hasAttribute('data-start')) {
  		pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);
  	}

  	env.element.appendChild(lineNumbersWrapper);

  	_resizeElement(pre);

  	Prism.hooks.run('line-numbers', env);
  });

  Prism.hooks.add('line-numbers', function (env) {
  	env.plugins = env.plugins || {};
  	env.plugins.lineNumbers = true;
  });

  /**
   * Global exports
   */
  Prism.plugins.lineNumbers = {
  	/**
  	 * Update line numbers after resizing the text area by mouse
  	 * @param {Element} element pre element
  	 * @return {undefined}
  	 */
  	updateLineNumbers: function(element) {
  		_resizeElement(element);
  	},
  	/**
  	 * Get node for provided line number
  	 * @param {Element} element pre element
  	 * @param {Number} number line number
  	 * @return {Element|undefined}
  	 */
  	getLine: function (element, number) {
  		if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {
  			return;
  		}

  		var lineNumberRows = element.querySelector('.line-numbers-rows');
  		var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;
  		var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);

  		if (number < lineNumberStart) {
  			number = lineNumberStart;
  		}
  		if (number > lineNumberEnd) {
  			number = lineNumberEnd;
  		}

  		var lineIndex = number - lineNumberStart;

  		return lineNumberRows.children[lineIndex];
  	}
  };

  var MATCH_ALL_CLASS = /(?:^|\s)match-braces(?:\s|$)/;

  var BRACE_HOVER_CLASS = /(?:^|\s)brace-hover(?:\s|$)/;
  var BRACE_SELECTED_CLASS = /(?:^|\s)brace-selected(?:\s|$)/;

  var NO_BRACE_HOVER_CLASS = /(?:^|\s)no-brace-hover(?:\s|$)/;
  var NO_BRACE_SELECT_CLASS = /(?:^|\s)no-brace-select(?:\s|$)/;

  var PARTNER = {
  	'(': ')',
  	'[': ']',
  	'{': '}',
  };

  var NAMES = {
  	'(': 'brace-round',
  	'[': 'brace-square',
  	'{': 'brace-curly',
  };

  var LEVEL_WARP = 12;

  var pairIdCounter = 0;

  var BRACE_ID_PATTERN = /^(pair-\d+-)(open|close)$/;

  /**
   * Returns the brace partner given one brace of a brace pair.
   *
   * @param {HTMLElement} brace
   * @returns {HTMLElement}
   */
  function getPartnerBrace(brace) {
  	var match = BRACE_ID_PATTERN.exec(brace.id);
  	return brace.parentElement.querySelector('#' + match[1] + (match[2] == 'open' ? 'close' : 'open'));
  }

  /**
   * @this {HTMLElement}
   */
  function hoverBrace() {
  	for (var parent = this.parentElement; parent; parent = parent.parentElement) {
  		if (NO_BRACE_HOVER_CLASS.test(parent.className)) {
  			return;
  		}
  	}

  	[this, getPartnerBrace(this)].forEach(function (ele) {
  		ele.className = (ele.className.replace(BRACE_HOVER_CLASS, ' ') + ' brace-hover').replace(/\s+/g, ' ');
  	});
  }
  /**
   * @this {HTMLElement}
   */
  function leaveBrace() {
  	[this, getPartnerBrace(this)].forEach(function (ele) {
  		ele.className = ele.className.replace(BRACE_HOVER_CLASS, ' ');
  	});
  }
  /**
   * @this {HTMLElement}
   */
  function clickBrace() {
  	for (var parent = this.parentElement; parent; parent = parent.parentElement) {
  		if (NO_BRACE_SELECT_CLASS.test(parent.className)) {
  			return;
  		}
  	}

  	[this, getPartnerBrace(this)].forEach(function (ele) {
  		ele.className = (ele.className.replace(BRACE_SELECTED_CLASS, ' ') + ' brace-selected').replace(/\s+/g, ' ');
  	});
  }

  Prism.hooks.add('complete', function (env) {

  	/** @type {HTMLElement} */
  	var code = env.element;
  	var pre = code.parentElement;

  	if (!pre || pre.tagName != 'PRE') {
  		return;
  	}

  	// find the braces to match
  	/** @type {string[]} */
  	var toMatch = [];
  	for (var ele = code; ele; ele = ele.parentElement) {
  		if (MATCH_ALL_CLASS.test(ele.className)) {
  			toMatch.push('(', '[', '{');
  			break;
  		}
  	}

  	if (toMatch.length == 0) {
  		// nothing to match
  		return;
  	}

  	if (!pre.__listenerAdded) {
  		// code blocks might be highlighted more than once
  		pre.addEventListener('mousedown', function removeBraceSelected() {
  			// the code element might have been replaced
  			var code = pre.querySelector(Prism.codeTag);
  			Array.prototype.slice.call(code.querySelectorAll('.brace-selected')).forEach(function (element) {
  				element.className = element.className.replace(BRACE_SELECTED_CLASS, ' ');
  			});
  		});
  		Object.defineProperty(pre, '__listenerAdded', { value: true });
  	}

  	/** @type {HTMLSpanElement[]} */
  	var punctuation = Array.prototype.slice.call(code.querySelectorAll('span.token.punctuation'));

  	/** @type {{ index: number, open: boolean, element: HTMLElement }[]} */
  	var allBraces = [];

  	toMatch.forEach(function (open) {
  		var close = PARTNER[open];
  		var name = NAMES[open];

  		/** @type {[number, number][]} */
  		var pairs = [];
  		/** @type {number[]} */
  		var openStack = [];

  		for (var i = 0; i < punctuation.length; i++) {
  			var element = punctuation[i];
  			if (element.childElementCount == 0) {
  				var text = element.textContent;
  				if (text === open) {
  					allBraces.push({ index: i, open: true, element: element });
  					element.className += ' ' + name;
  					element.className += ' brace-open';
  					openStack.push(i);
  				} else if (text === close) {
  					allBraces.push({ index: i, open: false, element: element });
  					element.className += ' ' + name;
  					element.className += ' brace-close';
  					if (openStack.length) {
  						pairs.push([i, openStack.pop()]);
  					}
  				}
  			}
  		}

  		pairs.forEach(function (pair) {
  			var pairId = 'pair-' + (pairIdCounter++) + '-';

  			var openEle = punctuation[pair[0]];
  			var closeEle = punctuation[pair[1]];

  			openEle.id = pairId + 'open';
  			closeEle.id = pairId + 'close';

  			[openEle, closeEle].forEach(function (ele) {
  				ele.addEventListener('mouseenter', hoverBrace);
  				ele.addEventListener('mouseleave', leaveBrace);
  				ele.addEventListener('click', clickBrace);
  			});
  		});
  	});

  	var level = 0;
  	allBraces.sort(function (a, b) { return a.index - b.index; });
  	allBraces.forEach(function (brace) {
  		if (brace.open) {
  			brace.element.className += ' brace-level-' + (level % LEVEL_WARP + 1);
  			level++;
  		} else {
  			level = Math.max(0, level - 1);
  			brace.element.className += ' brace-level-' + (level % LEVEL_WARP + 1);
  		}
  	});

  });

  Prism.languages.graphviz = {
    comment: [{
      pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
      greedy: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: !0,
      greedy: !0
    }],
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: !0
    },
    'class-name': {
      pattern: /(\b(?:digraph|graph)\s+)\w+/,
      lookbehind: true
    },
    keyword: /\b(?:digraph|graph|node|edge)\b/,
    property: /\b(?:Damping|URL|area|arrowhead|arrowsize|arrowtail|aspect|bb|bgcolor|center|charset|clusterrank|color|colorscheme|comment|compound|concentrate|constraint|decorate|defaultdist|dim|dimen|dir|diredgeconstraints|distortion|dpi|edgeURL|edgehref|edgetarget|edgetooltip|epsilon|esep|fillcolor|fixedsize|fontcolor|fontname|fontnames|fontpath|fontsize|group|headURL|headclip|headhref|headlabel|headport|headtarget|headtooltip|height|href|id|image|imagepath|imagescale|label|labelURL|labelangle|labeldistance|labelfloat|labelfontcolor|labelfontname|labelfontsize|labelhref|labeljust|labelloc|labeltarget|labeltooltip|landscape|layer|layerlistsep|layers|layerselect|layersep|layout|len|levels|levelsgap|lhead|lheight|lp|ltail|lwidth|margin|maxiter|mclimit|mindist|minlen|mode|model|mosek|nodesep|nojustify|normalize|nslimit|nslimit1|ordering|orientation|outputorder|overlap|overlap_scaling|pack|packmode|pad|page|pagedir|pencolor|penwidth|peripheries|pin|pos|quadtree|quantum|rank|rankdir|ranksep|ratio|rects|regular|remincross|repulsiveforce|resolution|root|rotate|rotation|samehead|sametail|samplepoints|scale|searchsize|sep|shape|shapefile|showboxes|sides|size|skew|smoothing|sortv|splines|start|style|stylesheet|tail_lp|tailURL|tailclip|tailhref|taillabel|tailport|tailtarget|tailtooltip|target|tooltip|truecolor|vertices|viewport|voro_margin|weight|width|xlabel)\b/,
    constant: /\b(?:dot|neato|fdp|sfdp|twopi|circo|osage|patchwork|LR|RL|TB|BT|box|polygon|ellipse|oval|circle|point|egg|triangle|plaintext|plain|diamond|trapezium|parallelogram|house|pentagon|hexagon|septagon|octagon|doublecircle|doubleoctagon|tripleoctagon|invtriangle|invtrapezium|invhouse|Mdiamond|Msquare|Mcircle|rect|rectangle|square|star|none|underline|cylinder|note|tab|folder|box3d|component|promoter|cds|terminator|utr|primersite|restrictionsite|fivepoverhang|threepoverhang|noverhang|assembly|signature|insulator|ribosite|rnastab|proteasesite|proteinstab|rpromoter|rarrow|larrow|lpromoter|solid|dashed|dotted|bold|rounded|diagonals|filled|striped|wedged)\b/,
    boolean: /\b(?:true|yes|false|no)\b/,
    number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
    operator: /->|--|=/,
    punctuation: /[{}[\];(),.:]/
  };

  function cov_53638h1o(){var path="/Users/ferdipr/Sources/github/graphviz-webcomponent/src/script-editor.js";var hash="07041f63b3cc2c236b08333f47529896a1220aed";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/ferdipr/Sources/github/graphviz-webcomponent/src/script-editor.js",statementMap:{"0":{start:{line:11,column:17},end:{line:11,column:67}},"1":{start:{line:12,column:21},end:{line:12,column:39}},"2":{start:{line:13,column:17},end:{line:13,column:32}},"3":{start:{line:14,column:15},end:{line:14,column:28}},"4":{start:{line:15,column:17},end:{line:15,column:32}},"5":{start:{line:16,column:15},end:{line:16,column:28}},"6":{start:{line:17,column:17},end:{line:17,column:32}},"7":{start:{line:18,column:18},end:{line:18,column:34}},"8":{start:{line:19,column:21},end:{line:19,column:40}},"9":{start:{line:20,column:19},end:{line:20,column:36}},"10":{start:{line:23,column:0},end:{line:23,column:21}},"11":{start:{line:26,column:2},end:{line:35,column:3}},"12":{start:{line:27,column:4},end:{line:27,column:49}},"13":{start:{line:28,column:4},end:{line:34,column:51}},"14":{start:{line:36,column:2},end:{line:36,column:17}},"15":{start:{line:40,column:2},end:{line:40,column:58}},"16":{start:{line:44,column:2},end:{line:48,column:14}},"17":{start:{line:47,column:23},end:{line:47,column:49}},"18":{start:{line:52,column:21},end:{line:52,column:65}},"19":{start:{line:53,column:21},end:{line:53,column:49}},"20":{start:{line:54,column:2},end:{line:55,column:66}},"21":{start:{line:55,column:4},end:{line:55,column:65}},"22":{start:{line:59,column:2},end:{line:59,column:37}},"23":{start:{line:63,column:20},end:{line:63,column:38}},"24":{start:{line:64,column:17},end:{line:64,column:51}},"25":{start:{line:65,column:25},end:{line:65,column:51}},"26":{start:{line:66,column:2},end:{line:66,column:58}},"27":{start:{line:67,column:14},end:{line:67,column:104}},"28":{start:{line:68,column:2},end:{line:68,column:23}},"29":{start:{line:69,column:2},end:{line:75,column:4}},"30":{start:{line:70,column:4},end:{line:70,column:42}},"31":{start:{line:71,column:4},end:{line:74,column:5}},"32":{start:{line:72,column:6},end:{line:72,column:33}},"33":{start:{line:73,column:6},end:{line:73,column:45}},"34":{start:{line:79,column:2},end:{line:79,column:27}},"35":{start:{line:80,column:2},end:{line:80,column:24}},"36":{start:{line:84,column:2},end:{line:84,column:24}},"37":{start:{line:85,column:2},end:{line:85,column:23}},"38":{start:{line:89,column:2},end:{line:89,column:43}},"39":{start:{line:93,column:2},end:{line:93,column:53}},"40":{start:{line:98,column:4},end:{line:98,column:11}},"41":{start:{line:99,column:4},end:{line:99,column:23}},"42":{start:{line:100,column:4},end:{line:100,column:23}},"43":{start:{line:101,column:4},end:{line:101,column:23}},"44":{start:{line:102,column:4},end:{line:102,column:39}},"45":{start:{line:103,column:4},end:{line:103,column:70}},"46":{start:{line:106,column:17},end:{line:106,column:38}},"47":{start:{line:107,column:22},end:{line:107,column:55}},"48":{start:{line:109,column:15},end:{line:109,column:34}},"49":{start:{line:110,column:20},end:{line:110,column:51}},"50":{start:{line:112,column:21},end:{line:112,column:42}},"51":{start:{line:113,column:26},end:{line:113,column:59}},"52":{start:{line:116,column:4},end:{line:129,column:5}},"53":{start:{line:118,column:8},end:{line:118,column:54}},"54":{start:{line:119,column:8},end:{line:119,column:50}},"55":{start:{line:119,column:32},end:{line:119,column:50}},"56":{start:{line:120,column:8},end:{line:120,column:13}},"57":{start:{line:122,column:8},end:{line:122,column:31}},"58":{start:{line:123,column:8},end:{line:123,column:53}},"59":{start:{line:123,column:32},end:{line:123,column:53}},"60":{start:{line:124,column:8},end:{line:124,column:13}},"61":{start:{line:126,column:8},end:{line:126,column:33}},"62":{start:{line:127,column:8},end:{line:127,column:97}},"63":{start:{line:127,column:78},end:{line:127,column:97}},"64":{start:{line:128,column:8},end:{line:128,column:13}},"65":{start:{line:133,column:4},end:{line:133,column:24}},"66":{start:{line:134,column:4},end:{line:134,column:22}},"67":{start:{line:135,column:4},end:{line:135,column:29}},"68":{start:{line:139,column:4},end:{line:139,column:23}},"69":{start:{line:140,column:4},end:{line:140,column:26}},"70":{start:{line:141,column:4},end:{line:141,column:30}},"71":{start:{line:144,column:37},end:{line:144,column:69}},"72":{start:{line:148,column:2},end:{line:148,column:41}},"73":{start:{line:149,column:2},end:{line:149,column:43}},"74":{start:{line:153,column:19},end:{line:153,column:38}},"75":{start:{line:154,column:20},end:{line:154,column:40}},"76":{start:{line:155,column:2},end:{line:159,column:3}},"77":{start:{line:156,column:4},end:{line:156,column:100}},"78":{start:{line:157,column:4},end:{line:157,column:32}},"79":{start:{line:158,column:4},end:{line:158,column:34}},"80":{start:{line:163,column:20},end:{line:163,column:71}},"81":{start:{line:163,column:50},end:{line:163,column:71}},"82":{start:{line:164,column:18},end:{line:164,column:72}},"83":{start:{line:164,column:46},end:{line:164,column:72}},"84":{start:{line:165,column:2},end:{line:165,column:50}},"85":{start:{line:166,column:2},end:{line:166,column:46}},"86":{start:{line:170,column:2},end:{line:170,column:61}},"87":{start:{line:171,column:2},end:{line:171,column:65}},"88":{start:{line:175,column:2},end:{line:175,column:43}},"89":{start:{line:176,column:18},end:{line:176,column:82}},"90":{start:{line:177,column:2},end:{line:177,column:57}},"91":{start:{line:177,column:32},end:{line:177,column:57}},"92":{start:{line:181,column:2},end:{line:181,column:76}},"93":{start:{line:181,column:35},end:{line:181,column:76}},"94":{start:{line:182,column:2},end:{line:182,column:69}},"95":{start:{line:185,column:0},end:{line:185,column:63}},"96":{start:{line:187,column:0},end:{line:187,column:76}}},fnMap:{"0":{name:"getTemplate",decl:{start:{line:25,column:9},end:{line:25,column:20}},loc:{start:{line:25,column:24},end:{line:37,column:1}},line:25},"1":{name:"triggerEvent",decl:{start:{line:39,column:9},end:{line:39,column:21}},loc:{start:{line:39,column:46},end:{line:41,column:1}},line:39},"2":{name:"getFeatureClasses",decl:{start:{line:43,column:9},end:{line:43,column:26}},loc:{start:{line:43,column:37},end:{line:49,column:1}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:12},end:{line:47,column:13}},loc:{start:{line:47,column:23},end:{line:47,column:49}},line:47},"4":{name:"hasChangedFeatureClass",decl:{start:{line:51,column:9},end:{line:51,column:31}},loc:{start:{line:51,column:53},end:{line:56,column:1}},line:51},"5":{name:"(anonymous_5)",decl:{start:{line:54,column:23},end:{line:54,column:24}},loc:{start:{line:55,column:4},end:{line:55,column:65}},line:55},"6":{name:"normalizeLineBreaks",decl:{start:{line:58,column:9},end:{line:58,column:28}},loc:{start:{line:58,column:37},end:{line:60,column:1}},line:58},"7":{name:"createEditor",decl:{start:{line:62,column:9},end:{line:62,column:21}},loc:{start:{line:62,column:32},end:{line:76,column:1}},line:62},"8":{name:"(anonymous_8)",decl:{start:{line:69,column:15},end:{line:69,column:16}},loc:{start:{line:69,column:26},end:{line:75,column:3}},line:69},"9":{name:"destroyEditor",decl:{start:{line:78,column:9},end:{line:78,column:22}},loc:{start:{line:78,column:33},end:{line:81,column:1}},line:78},"10":{name:"rebuildEditor",decl:{start:{line:83,column:9},end:{line:83,column:22}},loc:{start:{line:83,column:33},end:{line:86,column:1}},line:83},"11":{name:"updateEditor",decl:{start:{line:88,column:9},end:{line:88,column:21}},loc:{start:{line:88,column:32},end:{line:90,column:1}},line:88},"12":{name:"configureEditor",decl:{start:{line:92,column:9},end:{line:92,column:24}},loc:{start:{line:92,column:35},end:{line:94,column:1}},line:92},"13":{name:"(anonymous_13)",decl:{start:{line:97,column:2},end:{line:97,column:3}},loc:{start:{line:97,column:17},end:{line:104,column:3}},line:97},"14":{name:"(anonymous_14)",decl:{start:{line:106,column:2},end:{line:106,column:3}},loc:{start:{line:106,column:15},end:{line:106,column:40}},line:106},"15":{name:"(anonymous_15)",decl:{start:{line:107,column:2},end:{line:107,column:3}},loc:{start:{line:107,column:20},end:{line:107,column:57}},line:107},"16":{name:"(anonymous_16)",decl:{start:{line:109,column:2},end:{line:109,column:3}},loc:{start:{line:109,column:13},end:{line:109,column:36}},line:109},"17":{name:"(anonymous_17)",decl:{start:{line:110,column:2},end:{line:110,column:3}},loc:{start:{line:110,column:18},end:{line:110,column:53}},line:110},"18":{name:"(anonymous_18)",decl:{start:{line:112,column:2},end:{line:112,column:3}},loc:{start:{line:112,column:19},end:{line:112,column:44}},line:112},"19":{name:"(anonymous_19)",decl:{start:{line:113,column:2},end:{line:113,column:3}},loc:{start:{line:113,column:24},end:{line:113,column:61}},line:113},"20":{name:"(anonymous_20)",decl:{start:{line:115,column:2},end:{line:115,column:3}},loc:{start:{line:115,column:54},end:{line:130,column:3}},line:115},"21":{name:"(anonymous_21)",decl:{start:{line:132,column:2},end:{line:132,column:3}},loc:{start:{line:132,column:23},end:{line:136,column:3}},line:132},"22":{name:"(anonymous_22)",decl:{start:{line:138,column:2},end:{line:138,column:3}},loc:{start:{line:138,column:26},end:{line:142,column:3}},line:138},"23":{name:"(anonymous_23)",decl:{start:{line:144,column:2},end:{line:144,column:3}},loc:{start:{line:144,column:35},end:{line:144,column:71}},line:144},"24":{name:"rememberSize",decl:{start:{line:147,column:9},end:{line:147,column:21}},loc:{start:{line:147,column:32},end:{line:150,column:1}},line:147},"25":{name:"updateLineNumbers",decl:{start:{line:152,column:9},end:{line:152,column:26}},loc:{start:{line:152,column:37},end:{line:160,column:1}},line:152},"26":{name:"registerEvents",decl:{start:{line:162,column:9},end:{line:162,column:23}},loc:{start:{line:162,column:34},end:{line:167,column:1}},line:162},"27":{name:"(anonymous_27)",decl:{start:{line:163,column:44},end:{line:163,column:45}},loc:{start:{line:163,column:50},end:{line:163,column:71}},line:163},"28":{name:"(anonymous_28)",decl:{start:{line:164,column:40},end:{line:164,column:41}},loc:{start:{line:164,column:46},end:{line:164,column:72}},line:164},"29":{name:"unregisterEvents",decl:{start:{line:169,column:9},end:{line:169,column:25}},loc:{start:{line:169,column:36},end:{line:172,column:1}},line:169},"30":{name:"updateAllLineNumbers",decl:{start:{line:174,column:9},end:{line:174,column:29}},loc:{start:{line:174,column:33},end:{line:178,column:1}},line:174},"31":{name:"scheduleUpdateAllLineNumbers",decl:{start:{line:180,column:9},end:{line:180,column:37}},loc:{start:{line:180,column:41},end:{line:183,column:1}},line:180}},branchMap:{"0":{loc:{start:{line:26,column:2},end:{line:35,column:3}},type:"if",locations:[{start:{line:26,column:2},end:{line:35,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:26},"1":{loc:{start:{line:52,column:21},end:{line:52,column:65}},type:"cond-expr",locations:[{start:{line:52,column:32},end:{line:52,column:60}},{start:{line:52,column:63},end:{line:52,column:65}}],line:52},"2":{loc:{start:{line:71,column:4},end:{line:74,column:5}},type:"if",locations:[{start:{line:71,column:4},end:{line:74,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:71},"3":{loc:{start:{line:116,column:4},end:{line:129,column:5}},type:"switch",locations:[{start:{line:117,column:6},end:{line:120,column:13}},{start:{line:121,column:6},end:{line:124,column:13}},{start:{line:125,column:6},end:{line:128,column:13}}],line:116},"4":{loc:{start:{line:119,column:8},end:{line:119,column:50}},type:"if",locations:[{start:{line:119,column:8},end:{line:119,column:50}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:119},"5":{loc:{start:{line:123,column:8},end:{line:123,column:53}},type:"if",locations:[{start:{line:123,column:8},end:{line:123,column:53}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:123},"6":{loc:{start:{line:127,column:8},end:{line:127,column:97}},type:"if",locations:[{start:{line:127,column:8},end:{line:127,column:97}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:127},"7":{loc:{start:{line:127,column:12},end:{line:127,column:76}},type:"binary-expr",locations:[{start:{line:127,column:12},end:{line:127,column:30}},{start:{line:127,column:34},end:{line:127,column:76}}],line:127},"8":{loc:{start:{line:155,column:2},end:{line:159,column:3}},type:"if",locations:[{start:{line:155,column:2},end:{line:159,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:155},"9":{loc:{start:{line:155,column:6},end:{line:155,column:72}},type:"binary-expr",locations:[{start:{line:155,column:6},end:{line:155,column:36}},{start:{line:155,column:40},end:{line:155,column:72}}],line:155},"10":{loc:{start:{line:181,column:2},end:{line:181,column:76}},type:"if",locations:[{start:{line:181,column:2},end:{line:181,column:76}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:181}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},inputSourceMap:{version:3,sources:["/Users/ferdipr/Sources/github/graphviz-webcomponent/src/script-editor.js"],sourcesContent:["import { CodeJar } from './codejar/codejar'\nimport Prism from './prism/prism-core'\nimport lightTheme from './prism/prism-light.css'\nimport lineNumbersStyle from './prism/prism-line-numbers.css'\nimport matchBracesStyle from './prism/prism-match-braces.css'\nimport mainStyle from './script-editor.css'\nimport './prism/prism-line-numbers'\nimport './prism/prism-match-braces'\nimport './prism/prism-graphviz'\n\nconst features = ['line-numbers', 'match-braces', 'rainbow-braces']\nconst connectedKey = Symbol('connecte')\nconst valueKey = Symbol('value')\nconst tabKey = Symbol('tab')\nconst classKey = Symbol('class')\nconst jarKey = Symbol('jar')\nconst widthKey = Symbol('width')\nconst heightKey = Symbol('height')\nconst mousedownKey = Symbol('mousedown')\nconst mouseupKey = Symbol('mouseup')\nlet template, pendingAllLineNumbersUpdate\n\nPrism.codeTag = 'div'\n\nfunction getTemplate () {\n  if (!template) {\n    template = document.createElement('template')\n    template.innerHTML = `<style>\n${lightTheme}\n${lineNumbersStyle}\n${matchBracesStyle}\n${mainStyle}\n</style>\n<pre id=source-wrapper><div id=source></div></pre>`\n  }\n  return template\n}\n\nfunction triggerEvent (element, type, detail) {\n  element.dispatchEvent(new CustomEvent(type, { detail }))\n}\n\nfunction getFeatureClasses (element) {\n  return element.className\n    .trim()\n    .split(/\\s+/)\n    .filter(feature => features.includes(feature))\n    .join(' ')\n}\n\nfunction hasChangedFeatureClass (oldValue, newValue) {\n  const oldClasses = oldValue ? oldValue.trim().split(/\\s+/) : []\n  const newClasses = newValue.trim().split(/\\s+/)\n  return features.some(feature =>\n    oldClasses.includes(feature) !== newClasses.includes(feature))\n}\n\nfunction normalizeLineBreaks (value) {\n  return value.replace(/\\r?\\n/, '\\n')\n}\n\nfunction createEditor (element) {\n  const ownerRoot = element.shadowRoot\n  const source = ownerRoot.getElementById('source')\n  const featureClasses = getFeatureClasses(element)\n  source.className = `language-graphviz ${featureClasses}`\n  const jar = element[jarKey] = CodeJar(source, Prism.highlightElement, { tab: element.tab, ownerRoot })\n  updateEditor(element)\n  jar.onUpdate(newCode => {\n    newCode = normalizeLineBreaks(newCode)\n    if (element.value !== newCode) {\n      element[valueKey] = newCode\n      triggerEvent(element, 'input', newCode)\n    }\n  })\n}\n\nfunction destroyEditor (element) {\n  element[jarKey].destroy()\n  element[jarKey] = null\n}\n\nfunction rebuildEditor (element) {\n  destroyEditor(element)\n  createEditor(element)\n}\n\nfunction updateEditor (element) {\n  element[jarKey].updateCode(element.value)\n}\n\nfunction configureEditor (element) {\n  element[jarKey].updateOptions({ tab: element.tab })\n}\n\nclass GraphvizScriptEditorElement extends HTMLElement {\n  constructor () {\n    super()\n    this[valueKey] = ''\n    this[tabKey] = '  '\n    this[classKey] = ''\n    this.attachShadow({ mode: 'open' })\n    this.shadowRoot.appendChild(getTemplate().content.cloneNode(true))\n  }\n\n  get value () { return this[valueKey] }\n  set value (value) { this.setAttribute('value', value) }\n\n  get tab () { return this[tabKey] }\n  set tab (value) { this.setAttribute('tab', value) }\n\n  get className () { return this[classKey] }\n  set className (value) { this.setAttribute('class', value) }\n\n  attributeChangedCallback (name, oldValue, newValue) {\n    switch (name) {\n      case 'value':\n        this[valueKey] = normalizeLineBreaks(newValue)\n        if (this[connectedKey]) updateEditor(this)\n        break\n      case 'tab':\n        this[tabKey] = newValue\n        if (this[connectedKey]) configureEditor(this)\n        break\n      case 'class':\n        this[classKey] = newValue\n        if (this[connectedKey] && hasChangedFeatureClass(oldValue, newValue)) rebuildEditor(this)\n        break\n    }\n  }\n\n  connectedCallback () {\n    registerEvents(this)\n    createEditor(this)\n    this[connectedKey] = true\n  }\n\n  disconnectedCallback () {\n    destroyEditor(this)\n    unregisterEvents(this)\n    this[connectedKey] = false\n  }\n\n  static get observedAttributes () { return ['value', 'tab', 'class'] }\n}\n\nfunction rememberSize (element) {\n  element[widthKey] = element.clientWidth\n  element[heightKey] = element.clientHeight\n}\n\nfunction updateLineNumbers (element) {\n  const newWidth = element.clientWidth\n  const newHeight = element.clientHeight\n  if (newWidth !== element[widthKey] || newHeight !== element[heightKey]) {\n    Prism.plugins.lineNumbers.updateLineNumbers(element.shadowRoot.getElementById('source-wrapper'))\n    element[widthKey] = newWidth\n    element[heightKey] = newHeight\n  }\n}\n\nfunction registerEvents (element) {\n  const mousedown = element[mousedownKey] = () => rememberSize(element)\n  const mouseup = element[mouseupKey] = () => updateLineNumbers(element)\n  element.addEventListener('mousedown', mousedown)\n  element.addEventListener('mouseup', mouseup)\n}\n\nfunction unregisterEvents (element) {\n  element.removeEventListener('mouseup', element[mouseupKey])\n  element.removeEventListener('mousedown', element[mousedownKey])\n}\n\nfunction updateAllLineNumbers () {\n  clearTimeout(pendingAllLineNumbersUpdate)\n  const editors = document.querySelectorAll('graphviz-script-editor.line-numbers')\n  for (const editor of editors) updateLineNumbers(editor)\n}\n\nfunction scheduleUpdateAllLineNumbers () {\n  if (pendingAllLineNumbersUpdate) clearTimeout(pendingAllLineNumbersUpdate)\n  pendingAllLineNumbersUpdate = setTimeout(updateAllLineNumbers, 300)\n}\n\nwindow.addEventListener('resize', scheduleUpdateAllLineNumbers)\n\ncustomElements.define('graphviz-script-editor', GraphvizScriptEditorElement)\n\nexport default GraphvizScriptEditorElement\n"],names:[],mappings:"AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnxG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxpG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AACH,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrjE,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACllF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzrfile:null},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"07041f63b3cc2c236b08333f47529896a1220aed"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
  cov_53638h1o=function(){return actualCoverage;};}return actualCoverage;}cov_53638h1o();const features=(cov_53638h1o().s[0]++,['line-numbers','match-braces','rainbow-braces']);const connectedKey=(cov_53638h1o().s[1]++,Symbol('connecte'));const valueKey=(cov_53638h1o().s[2]++,Symbol('value'));const tabKey=(cov_53638h1o().s[3]++,Symbol('tab'));const classKey=(cov_53638h1o().s[4]++,Symbol('class'));const jarKey=(cov_53638h1o().s[5]++,Symbol('jar'));const widthKey=(cov_53638h1o().s[6]++,Symbol('width'));const heightKey=(cov_53638h1o().s[7]++,Symbol('height'));const mousedownKey=(cov_53638h1o().s[8]++,Symbol('mousedown'));const mouseupKey=(cov_53638h1o().s[9]++,Symbol('mouseup'));let template,pendingAllLineNumbersUpdate;cov_53638h1o().s[10]++;Prism.codeTag='div';function getTemplate(){cov_53638h1o().f[0]++;cov_53638h1o().s[11]++;if(!template){cov_53638h1o().b[0][0]++;cov_53638h1o().s[12]++;template=document.createElement('template');cov_53638h1o().s[13]++;template.innerHTML=`<style>
${lightTheme}
${lineNumbersStyle}
${matchBracesStyle}
${mainStyle}
</style>
<pre id=source-wrapper><div id=source></div></pre>`;}else {cov_53638h1o().b[0][1]++;}cov_53638h1o().s[14]++;return template;}function triggerEvent(element,type,detail){cov_53638h1o().f[1]++;cov_53638h1o().s[15]++;element.dispatchEvent(new CustomEvent(type,{detail}));}function getFeatureClasses(element){cov_53638h1o().f[2]++;cov_53638h1o().s[16]++;return element.className.trim().split(/\s+/).filter(feature=>{cov_53638h1o().f[3]++;cov_53638h1o().s[17]++;return features.includes(feature);}).join(' ');}function hasChangedFeatureClass(oldValue,newValue){cov_53638h1o().f[4]++;const oldClasses=(cov_53638h1o().s[18]++,oldValue?(cov_53638h1o().b[1][0]++,oldValue.trim().split(/\s+/)):(cov_53638h1o().b[1][1]++,[]));const newClasses=(cov_53638h1o().s[19]++,newValue.trim().split(/\s+/));cov_53638h1o().s[20]++;return features.some(feature=>{cov_53638h1o().f[5]++;cov_53638h1o().s[21]++;return oldClasses.includes(feature)!==newClasses.includes(feature);});}function normalizeLineBreaks(value){cov_53638h1o().f[6]++;cov_53638h1o().s[22]++;return value.replace(/\r?\n/,'\n');}function createEditor(element){cov_53638h1o().f[7]++;const ownerRoot=(cov_53638h1o().s[23]++,element.shadowRoot);const source=(cov_53638h1o().s[24]++,ownerRoot.getElementById('source'));const featureClasses=(cov_53638h1o().s[25]++,getFeatureClasses(element));cov_53638h1o().s[26]++;source.className=`language-graphviz ${featureClasses}`;const jar=(cov_53638h1o().s[27]++,element[jarKey]=CodeJar(source,Prism.highlightElement,{tab:element.tab,ownerRoot}));cov_53638h1o().s[28]++;updateEditor(element);cov_53638h1o().s[29]++;jar.onUpdate(newCode=>{cov_53638h1o().f[8]++;cov_53638h1o().s[30]++;newCode=normalizeLineBreaks(newCode);cov_53638h1o().s[31]++;if(element.value!==newCode){cov_53638h1o().b[2][0]++;cov_53638h1o().s[32]++;element[valueKey]=newCode;cov_53638h1o().s[33]++;triggerEvent(element,'input',newCode);}else {cov_53638h1o().b[2][1]++;}});}function destroyEditor(element){cov_53638h1o().f[9]++;cov_53638h1o().s[34]++;element[jarKey].destroy();cov_53638h1o().s[35]++;element[jarKey]=null;}function rebuildEditor(element){cov_53638h1o().f[10]++;cov_53638h1o().s[36]++;destroyEditor(element);cov_53638h1o().s[37]++;createEditor(element);}function updateEditor(element){cov_53638h1o().f[11]++;cov_53638h1o().s[38]++;element[jarKey].updateCode(element.value);}function configureEditor(element){cov_53638h1o().f[12]++;cov_53638h1o().s[39]++;element[jarKey].updateOptions({tab:element.tab});}class GraphvizScriptEditorElement extends HTMLElement{constructor(){cov_53638h1o().f[13]++;cov_53638h1o().s[40]++;super();cov_53638h1o().s[41]++;this[valueKey]='';cov_53638h1o().s[42]++;this[tabKey]='  ';cov_53638h1o().s[43]++;this[classKey]='';cov_53638h1o().s[44]++;this.attachShadow({mode:'open'});cov_53638h1o().s[45]++;this.shadowRoot.appendChild(getTemplate().content.cloneNode(true));}get value(){cov_53638h1o().f[14]++;cov_53638h1o().s[46]++;return this[valueKey];}set value(value){cov_53638h1o().f[15]++;cov_53638h1o().s[47]++;this.setAttribute('value',value);}get tab(){cov_53638h1o().f[16]++;cov_53638h1o().s[48]++;return this[tabKey];}set tab(value){cov_53638h1o().f[17]++;cov_53638h1o().s[49]++;this.setAttribute('tab',value);}get className(){cov_53638h1o().f[18]++;cov_53638h1o().s[50]++;return this[classKey];}set className(value){cov_53638h1o().f[19]++;cov_53638h1o().s[51]++;this.setAttribute('class',value);}attributeChangedCallback(name,oldValue,newValue){cov_53638h1o().f[20]++;cov_53638h1o().s[52]++;switch(name){case'value':cov_53638h1o().b[3][0]++;cov_53638h1o().s[53]++;this[valueKey]=normalizeLineBreaks(newValue);cov_53638h1o().s[54]++;if(this[connectedKey]){cov_53638h1o().b[4][0]++;cov_53638h1o().s[55]++;updateEditor(this);}else {cov_53638h1o().b[4][1]++;}cov_53638h1o().s[56]++;break;case'tab':cov_53638h1o().b[3][1]++;cov_53638h1o().s[57]++;this[tabKey]=newValue;cov_53638h1o().s[58]++;if(this[connectedKey]){cov_53638h1o().b[5][0]++;cov_53638h1o().s[59]++;configureEditor(this);}else {cov_53638h1o().b[5][1]++;}cov_53638h1o().s[60]++;break;case'class':cov_53638h1o().b[3][2]++;cov_53638h1o().s[61]++;this[classKey]=newValue;cov_53638h1o().s[62]++;if((cov_53638h1o().b[7][0]++,this[connectedKey])&&(cov_53638h1o().b[7][1]++,hasChangedFeatureClass(oldValue,newValue))){cov_53638h1o().b[6][0]++;cov_53638h1o().s[63]++;rebuildEditor(this);}else {cov_53638h1o().b[6][1]++;}cov_53638h1o().s[64]++;break;}}connectedCallback(){cov_53638h1o().f[21]++;cov_53638h1o().s[65]++;registerEvents(this);cov_53638h1o().s[66]++;createEditor(this);cov_53638h1o().s[67]++;this[connectedKey]=true;}disconnectedCallback(){cov_53638h1o().f[22]++;cov_53638h1o().s[68]++;destroyEditor(this);cov_53638h1o().s[69]++;unregisterEvents(this);cov_53638h1o().s[70]++;this[connectedKey]=false;}static get observedAttributes(){cov_53638h1o().f[23]++;cov_53638h1o().s[71]++;return ['value','tab','class'];}}function rememberSize(element){cov_53638h1o().f[24]++;cov_53638h1o().s[72]++;element[widthKey]=element.clientWidth;cov_53638h1o().s[73]++;element[heightKey]=element.clientHeight;}function updateLineNumbers(element){cov_53638h1o().f[25]++;const newWidth=(cov_53638h1o().s[74]++,element.clientWidth);const newHeight=(cov_53638h1o().s[75]++,element.clientHeight);cov_53638h1o().s[76]++;if((cov_53638h1o().b[9][0]++,newWidth!==element[widthKey])||(cov_53638h1o().b[9][1]++,newHeight!==element[heightKey])){cov_53638h1o().b[8][0]++;cov_53638h1o().s[77]++;Prism.plugins.lineNumbers.updateLineNumbers(element.shadowRoot.getElementById('source-wrapper'));cov_53638h1o().s[78]++;element[widthKey]=newWidth;cov_53638h1o().s[79]++;element[heightKey]=newHeight;}else {cov_53638h1o().b[8][1]++;}}function registerEvents(element){cov_53638h1o().f[26]++;const mousedown=(cov_53638h1o().s[80]++,element[mousedownKey]=()=>{cov_53638h1o().f[27]++;cov_53638h1o().s[81]++;return rememberSize(element);});const mouseup=(cov_53638h1o().s[82]++,element[mouseupKey]=()=>{cov_53638h1o().f[28]++;cov_53638h1o().s[83]++;return updateLineNumbers(element);});cov_53638h1o().s[84]++;element.addEventListener('mousedown',mousedown);cov_53638h1o().s[85]++;element.addEventListener('mouseup',mouseup);}function unregisterEvents(element){cov_53638h1o().f[29]++;cov_53638h1o().s[86]++;element.removeEventListener('mouseup',element[mouseupKey]);cov_53638h1o().s[87]++;element.removeEventListener('mousedown',element[mousedownKey]);}function updateAllLineNumbers(){cov_53638h1o().f[30]++;cov_53638h1o().s[88]++;clearTimeout(pendingAllLineNumbersUpdate);const editors=(cov_53638h1o().s[89]++,document.querySelectorAll('graphviz-script-editor.line-numbers'));cov_53638h1o().s[90]++;for(const editor of editors){cov_53638h1o().s[91]++;updateLineNumbers(editor);}}function scheduleUpdateAllLineNumbers(){cov_53638h1o().f[31]++;cov_53638h1o().s[92]++;if(pendingAllLineNumbersUpdate){cov_53638h1o().b[10][0]++;cov_53638h1o().s[93]++;clearTimeout(pendingAllLineNumbersUpdate);}else {cov_53638h1o().b[10][1]++;}cov_53638h1o().s[94]++;pendingAllLineNumbersUpdate=setTimeout(updateAllLineNumbers,300);}cov_53638h1o().s[95]++;window.addEventListener('resize',scheduleUpdateAllLineNumbers);cov_53638h1o().s[96]++;customElements.define('graphviz-script-editor',GraphvizScriptEditorElement);

  function cov_2olg5x88p7(){var path="/Users/ferdipr/Sources/github/graphviz-webcomponent/src/index.js";var hash="b410b5ecce2ec56197292d817433f66628e6a781";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/ferdipr/Sources/github/graphviz-webcomponent/src/index.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},inputSourceMap:{version:3,sources:["/Users/ferdipr/Sources/github/graphviz-webcomponent/src/index.js"],sourcesContent:["export { default as GraphvizGraphElement } from './graph'\nexport { default as GraphvizScriptEditorElement } from './script-editor'\n"],names:[],mappings:"AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;",file:null},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b410b5ecce2ec56197292d817433f66628e6a781"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
  cov_2olg5x88p7=function(){return actualCoverage;};}return actualCoverage;}cov_2olg5x88p7();

  exports.GraphvizGraphElement = GraphvizGraphElement;
  exports.GraphvizScriptEditorElement = GraphvizScriptEditorElement;

  return exports;

})({});
//# sourceMappingURL=index.min.js.map
